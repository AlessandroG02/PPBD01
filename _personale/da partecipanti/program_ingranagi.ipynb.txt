{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Esercizio - Il drago Smaug\n",
    "\n",
    "Trova UNA SOLA stringa che stampata con `print` venga mostrata (all'incirca) come la seguente:\n",
    "\n",
    "```\n",
    "________________~----~______________\n",
    "////            Storia\t\t    \\\\\\\\\n",
    "Il      cavaliere\n",
    "\t    affronta\n",
    "\n",
    "\t    il      drago   'Smaug' davanti\n",
    "\t\t        al       castello\n",
    "\n",
    "```\n",
    "\n",
    "- inizia e concludi la stringa con apice singolo\n",
    "\n",
    "- **USA SOLO** combinazioni di `\\t` e `\\n`\n",
    "- **NON** usare spazi\n",
    "- **NOTA**: usando i tab potresti vedere risultati diversi a seconda dell'editor che stai usando, quindi puoi solo sperare di ottenere un risultato simile a quello proposto."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "s = 'bla bla'\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def gear_calculation():\n",
    "    gear1_tooth_length = float(input(\"Enter the base tooth length of Gear 1: \"))\n",
    "    gear2_tooth_length = float(input(\"Enter the base tooth length of Gear 2: \"))\n",
    "    gear_ratio = gear2_tooth_length / gear1_tooth_length\n",
    "    indentation_angle = math.degrees(math.atan(2 / (gear_ratio + 2)))\n",
    "    print(f\"Gear Ratio: {gear_ratio:.2f}\")\n",
    "    print(f\"Indentation Angle: {indentation_angle:.2f} degrees\")\n",
    "\n",
    "    print(\"Do you want to calculate the end tooth length at the base?\")\n",
    "    calculate_end_tooth_length = input(\"Enter 'yes' or 'no': \")\n",
    "    if calculate_end_tooth_length.lower() == \"yes\":\n",
    "        gear1_end_tooth_length = gear1_tooth_length / math.cos(math.radians(indentation_angle))\n",
    "        gear2_end_tooth_length = gear2_tooth_length / math.cos(math.radians(indentation_angle))\n",
    "        print(f\"End Tooth Length at the Base for Gear 1: {gear1_end_tooth_length:.2f}\")\n",
    "        print(f\"End Tooth Length at the Base for Gear 2: {gear2_end_tooth_length:.2f}\")\n",
    "\n",
    "gear_calculation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Indentation Angle: 33.69 degrees\n",
      "End Tooth Length at the Base for Gear 1: 1.20\n",
      "End Tooth Length at the Base for Gear 2: 4.81\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def gear_calculation():\n",
    "    gear1_tooth_length = float(input(\"Enter the base tooth length of Gear 1: \"))\n",
    "    gear2_tooth_length = float(input(\"Enter the base tooth length of Gear 2: \"))\n",
    "    gear_ratio = float(input(\"Enter the gear ratio: \"))\n",
    "    indentation_angle = math.degrees(math.atan(2 / (gear_ratio + 2)))\n",
    "    print(f\"Indentation Angle: {indentation_angle:.2f} degrees\")\n",
    "    \n",
    "    gear1_end_tooth_length = gear1_tooth_length / math.cos(math.radians(indentation_angle))\n",
    "    gear2_end_tooth_length = gear2_tooth_length / math.cos(math.radians(indentation_angle))\n",
    "    print(f\"End Tooth Length at the Base for Gear 1: {gear1_end_tooth_length:.2f}\")\n",
    "    print(f\"End Tooth Length at the Base for Gear 2: {gear2_end_tooth_length:.2f}\")\n",
    "\n",
    "gear_calculation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Indentation Angle: 42.71 degrees\n",
      "End Tooth Length at the Base for Gear 1: 5.44 mm\n",
      "End Tooth Length at the Base for Gear 2: 5.44 mm\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def gear_calculation():\n",
    "    gear1_tooth_length = float(input(\"Enter the base tooth length of Gear 1 (mm): \"))\n",
    "    gear2_tooth_length = float(input(\"Enter the base tooth length of Gear 2 (mm): \"))\n",
    "    gear_ratio_fraction = input(\"Enter the gear ratio as a fraction (e.g. 1/2): \")\n",
    "    gear_ratio = eval(gear_ratio_fraction)  # Evaluates the fraction string to a float\n",
    "    indentation_angle = math.degrees(math.atan(2 / (gear_ratio + 2)))\n",
    "    print(f\"Indentation Angle: {indentation_angle:.2f} degrees\")\n",
    "    \n",
    "    gear1_end_tooth_length = gear1_tooth_length / math.cos(math.radians(indentation_angle))\n",
    "    gear2_end_tooth_length = gear2_tooth_length / math.cos(math.radians(indentation_angle))\n",
    "    print(f\"End Tooth Length at the Base for Gear 1: {gear1_end_tooth_length:.2f} mm\")\n",
    "    print(f\"End Tooth Length at the Base for Gear 2: {gear2_end_tooth_length:.2f} mm\")\n",
    "\n",
    "gear_calculation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Indentation Angle: 42.71 degrees\n",
      "Pitch Diameter of Gear 1: 5.90 mm\n",
      "Pitch Diameter of Gear 2: 5.90 mm\n",
      "Diameter of Gear 1: 18.53 mm\n",
      "Diameter of Gear 2: 18.53 mm\n",
      "Distance between centers of Gear 1 and Gear 2: 5.90 mm\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def gear_calculation():\n",
    "    gear1_tooth_length = float(input(\"Enter the base tooth length of Gear 1 (mm): \"))\n",
    "    gear2_tooth_length = float(input(\"Enter the base tooth length of Gear 2 (mm): \"))\n",
    "    gear_ratio_fraction = input(\"Enter the gear ratio as a fraction (e.g. 1/2): \")\n",
    "    gear_ratio = eval(gear_ratio_fraction)\n",
    "    indentation_angle = math.degrees(math.atan(2 / (gear_ratio + 2)))\n",
    "    print(f\"Indentation Angle: {indentation_angle:.2f} degrees\")\n",
    "    \n",
    "    gear1_pitch_diameter = gear1_tooth_length / math.sin(math.radians(indentation_angle))\n",
    "    gear2_pitch_diameter = gear2_tooth_length / math.sin(math.radians(indentation_angle))\n",
    "    print(f\"Pitch Diameter of Gear 1: {gear1_pitch_diameter:.2f} mm\")\n",
    "    print(f\"Pitch Diameter of Gear 2: {gear2_pitch_diameter:.2f} mm\")\n",
    "\n",
    "    gear1_diameter = gear1_pitch_diameter * math.pi\n",
    "    gear2_diameter = gear2_pitch_diameter * math.pi\n",
    "    print(f\"Diameter of Gear 1: {gear1_diameter:.2f} mm\")\n",
    "    print(f\"Diameter of Gear 2: {gear2_diameter:.2f} mm\")\n",
    "\n",
    "    distance_between_centers = (gear1_pitch_diameter + gear2_pitch_diameter) / 2\n",
    "    print(f\"Distance between centers of Gear 1 and Gear 2: {distance_between_centers:.2f} mm\")\n",
    "\n",
    "gear_calculation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Indentation Angle: 42.71 degrees\n",
      "Diameter of Gear 1: 12.57 mm\n",
      "Diameter of Gear 2: 12.57 mm\n",
      "Tooth Length at the Base for Gear 1: 5.80 mm\n",
      "Tooth Length at the Base for Gear 2: 5.80 mm\n",
      "Distance between centers of Gear 1 and Gear 2: 4.00 mm\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def gear_calculation():\n",
    "    gear1_pitch_diameter = float(input(\"Enter the pitch diameter of Gear 1 (mm): \"))\n",
    "    gear2_pitch_diameter = float(input(\"Enter the pitch diameter of Gear 2 (mm): \"))\n",
    "    gear_ratio_fraction = input(\"Enter the gear ratio as a fraction (e.g. 1/2): \")\n",
    "    gear_ratio = eval(gear_ratio_fraction)\n",
    "    indentation_angle = math.degrees(math.atan(2 / (gear_ratio + 2)))\n",
    "    print(f\"Indentation Angle: {indentation_angle:.2f} degrees\")\n",
    "    \n",
    "    gear1_diameter = gear1_pitch_diameter * math.pi\n",
    "    gear2_diameter = gear2_pitch_diameter * math.pi\n",
    "    print(f\"Diameter of Gear 1: {gear1_diameter:.2f} mm\")\n",
    "    print(f\"Diameter of Gear 2: {gear2_diameter:.2f} mm\")\n",
    "\n",
    "    gear1_tooth_length = gear1_pitch_diameter * math.pi / (gear_ratio + 2)\n",
    "    gear2_tooth_length = gear2_pitch_diameter * math.pi / (gear_ratio + 2)\n",
    "    print(f\"Tooth Length at the Base for Gear 1: {gear1_tooth_length:.2f} mm\")\n",
    "    print(f\"Tooth Length at the Base for Gear 2: {gear2_tooth_length:.2f} mm\")\n",
    "\n",
    "    distance_between_centers = (gear1_pitch_diameter + gear2_pitch_diameter) / 2\n",
    "    print(f\"Distance between centers of Gear 1 and Gear 2: {distance_between_centers:.2f} mm\")\n",
    "\n",
    "gear_calculation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Indentation Angle: 42.71 degrees\n",
      "Primitive Diameter of Gear 1: 5.44 mm\n",
      "Primitive Diameter of Gear 2: 5.44 mm\n",
      "Tooth Length at the Base for Gear 1: 5.80 mm\n",
      "Tooth Length at the Base for Gear 2: 5.80 mm\n",
      "Distance between centers of Gear 1 and Gear 2: 4.00 mm\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def gear_calculation():\n",
    "    gear1_pitch_diameter = float(input(\"Enter the pitch diameter of Gear 1 (mm): \"))\n",
    "    gear2_pitch_diameter = float(input(\"Enter the pitch diameter of Gear 2 (mm): \"))\n",
    "    gear_ratio_fraction = input(\"Enter the gear ratio as a fraction (e.g. 1/2): \")\n",
    "    gear_ratio = eval(gear_ratio_fraction)\n",
    "    indentation_angle = math.degrees(math.atan(2 / (gear_ratio + 2)))\n",
    "    print(f\"Indentation Angle: {indentation_angle:.2f} degrees\")\n",
    "    \n",
    "    gear1_primitive_diameter = gear1_pitch_diameter / math.cos(math.radians(indentation_angle))\n",
    "    gear2_primitive_diameter = gear2_pitch_diameter / math.cos(math.radians(indentation_angle))\n",
    "    print(f\"Primitive Diameter of Gear 1: {gear1_primitive_diameter:.2f} mm\")\n",
    "    print(f\"Primitive Diameter of Gear 2: {gear2_primitive_diameter:.2f} mm\")\n",
    "\n",
    "    gear1_tooth_length = gear1_pitch_diameter * math.pi / (gear_ratio + 2)\n",
    "    gear2_tooth_length = gear2_pitch_diameter * math.pi / (gear_ratio + 2)\n",
    "    print(f\"Tooth Length at the Base for Gear 1: {gear1_tooth_length:.2f} mm\")\n",
    "    print(f\"Tooth Length at the Base for Gear 2: {gear2_tooth_length:.2f} mm\")\n",
    "\n",
    "    distance_between_centers = (gear1_pitch_diameter + gear2_pitch_diameter) / 2\n",
    "    print(f\"Distance between centers of Gear 1 and Gear 2: {distance_between_centers:.2f} mm\")\n",
    "\n",
    "gear_calculation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Indentation Angle: 42.71 degrees\n",
      "Primitive Diameter of Gear 1: 5.44 mm\n",
      "Primitive Diameter of Gear 2: 5.44 mm\n",
      "Tooth Length at the Base for Gear 1: 5.80 mm\n",
      "Tooth Length at the Base for Gear 2: 5.80 mm\n",
      "Distance between centers of Gear 1 and Gear 2: 4.00 mm\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def gear_calculation():\n",
    "    gear1_pitch_diameter = float(input(\"Enter the pitch diameter of Gear 1 (mm): \"))\n",
    "    gear2_pitch_diameter = float(input(\"Enter the pitch diameter of Gear 2 (mm): \"))\n",
    "    gear_ratio_fraction = input(\"Enter the gear ratio as a fraction (e.g. 1/2): \")\n",
    "    gear_ratio = eval(gear_ratio_fraction)\n",
    "    indentation_angle = math.degrees(math.atan2(2, (gear_ratio + 2)))\n",
    "    print(f\"Indentation Angle: {indentation_angle:.2f} degrees\")\n",
    "    \n",
    "    gear1_primitive_diameter = gear1_pitch_diameter / math.cos(math.radians(indentation_angle))\n",
    "    gear2_primitive_diameter = gear2_pitch_diameter / math.cos(math.radians(indentation_angle))\n",
    "    print(f\"Primitive Diameter of Gear 1: {gear1_primitive_diameter:.2f} mm\")\n",
    "    print(f\"Primitive Diameter of Gear 2: {gear2_primitive_diameter:.2f} mm\")\n",
    "\n",
    "    gear1_tooth_length = gear1_pitch_diameter * math.pi / (gear_ratio + 2)\n",
    "    gear2_tooth_length = gear2_pitch_diameter * math.pi / (gear_ratio + 2)\n",
    "    print(f\"Tooth Length at the Base for Gear 1: {gear1_tooth_length:.2f} mm\")\n",
    "    print(f\"Tooth Length at the Base for Gear 2: {gear2_tooth_length:.2f} mm\")\n",
    "\n",
    "    distance_between_centers = abs((gear1_pitch_diameter + gear2_pitch_diameter) / 2)\n",
    "    print(f\"Distance between centers of Gear 1 and Gear 2: {distance_between_centers:.2f} mm\")\n",
    "\n",
    "gear_calculation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Indentation Angle: 42.71 degrees\n",
      "Primitive Diameter of Gear 1: 5.44 mm\n",
      "Primitive Diameter of Gear 2: 5.44 mm\n",
      "Tooth Length at the Base for Gear 1: 5.80 mm\n",
      "Tooth Length at the Base for Gear 2: 5.80 mm\n",
      "Distance between centers of Gear 1 and Gear 2: 4.00 mm\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def gear_calculation():\n",
    "    gear1_pitch_diameter = float(input(\"Enter the pitch diameter of Gear 1 (mm): \"))\n",
    "    gear2_pitch_diameter = float(input(\"Enter the pitch diameter of Gear 2 (mm): \"))\n",
    "    gear_ratio_fraction = input(\"Enter the gear ratio as a fraction (e.g. 1/2): \")\n",
    "    gear_ratio = eval(gear_ratio_fraction)\n",
    "    indentation_angle = math.degrees(math.atan2(2, (gear_ratio + 2)))\n",
    "    print(f\"Indentation Angle: {indentation_angle:.2f} degrees\")\n",
    "    \n",
    "    gear1_primitive_diameter = gear1_pitch_diameter / math.cos(math.radians(indentation_angle))\n",
    "    gear2_primitive_diameter = gear2_pitch_diameter / math.cos(math.radians(indentation_angle))\n",
    "    print(f\"Primitive Diameter of Gear 1: {gear1_primitive_diameter:.2f} mm\")\n",
    "    print(f\"Primitive Diameter of Gear 2: {gear2_primitive_diameter:.2f} mm\")\n",
    "\n",
    "    gear1_tooth_length = gear1_pitch_diameter * math.pi / (gear_ratio + 2)\n",
    "    gear2_tooth_length = gear2_pitch_diameter * math.pi / (gear_ratio + 2)\n",
    "    print(f\"Tooth Length at the Base for Gear 1: {gear1_tooth_length:.2f} mm\")\n",
    "    print(f\"Tooth Length at the Base for Gear 2: {gear2_tooth_length:.2f} mm\")\n",
    "\n",
    "    distance_between_centers = abs((gear1_pitch_diameter + gear2_pitch_diameter) / 2)\n",
    "    print(f\"Distance between centers of Gear 1 and Gear 2: {distance_between_centers:.2f} mm\")\n",
    "\n",
    "gear_calculation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pitch Diameter of Wheel 1: 1.60 mm\n",
      "Pitch Diameter of Wheel 2: 3.19 mm\n",
      "Primitive Diameter of Wheel 1: 1.70 mm\n",
      "Primitive Diameter of Wheel 2: 3.40 mm\n",
      "Ratio of Rotation: 1:2.0\n",
      "Corresponding Diameter of Wheel 1: 3.40 mm\n",
      "Corresponding Diameter of Wheel 2: 1.70 mm\n",
      "Linear Length of Wheel 1: 5.34 mm\n",
      "Linear Length of Wheel 2: 10.67 mm\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def gear_calculation():\n",
    "    base_diameter = float(input(\"Enter the tooth diameter at the base (mm): \"))\n",
    "    tooth_height = float(input(\"Enter the tooth height (mm): \"))\n",
    "    num_teeth1 = int(input(\"Enter the number of teeth for wheel 1 (optional): \") or 12)\n",
    "    num_teeth2 = int(input(\"Enter the number of teeth for wheel 2 (optional): \") or 24)\n",
    "\n",
    "    pitch_diameter1 = base_diameter / math.cos(math.radians(20))\n",
    "    pitch_diameter2 = pitch_diameter1 * num_teeth2 / num_teeth1\n",
    "    print(f\"Pitch Diameter of Wheel 1: {pitch_diameter1:.2f} mm\")\n",
    "    print(f\"Pitch Diameter of Wheel 2: {pitch_diameter2:.2f} mm\")\n",
    "\n",
    "    primitive_diameter1 = pitch_diameter1 / math.cos(math.radians(20))\n",
    "    primitive_diameter2 = pitch_diameter2 / math.cos(math.radians(20))\n",
    "    print(f\"Primitive Diameter of Wheel 1: {primitive_diameter1:.2f} mm\")\n",
    "    print(f\"Primitive Diameter of Wheel 2: {primitive_diameter2:.2f} mm\")\n",
    "\n",
    "    ratio_of_rotation = num_teeth2 / num_teeth1\n",
    "    print(f\"Ratio of Rotation: 1:{ratio_of_rotation}\")\n",
    "\n",
    "    corresponding_diameter1 = primitive_diameter1 * ratio_of_rotation\n",
    "    corresponding_diameter2 = primitive_diameter2 / ratio_of_rotation\n",
    "    print(f\"Corresponding Diameter of Wheel 1: {corresponding_diameter1:.2f} mm\")\n",
    "    print(f\"Corresponding Diameter of Wheel 2: {corresponding_diameter2:.2f} mm\")\n",
    "\n",
    "    linear_length1 = math.pi * primitive_diameter1\n",
    "    linear_length2 = math.pi * primitive_diameter2\n",
    "    print(f\"Linear Length of Wheel 1: {linear_length1:.2f} mm\")\n",
    "    print(f\"Linear Length of Wheel 2: {linear_length2:.2f} mm\")\n",
    "\n",
    "gear_calculation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[12], line 39\u001b[0m\n\u001b[0;32m     36\u001b[0m     \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mNumber of teeth for wheel 1: \u001b[39m\u001b[39m{\u001b[39;00mnum_teeth1\u001b[39m}\u001b[39;00m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     37\u001b[0m     \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mNumber of teeth for wheel 2: \u001b[39m\u001b[39m{\u001b[39;00mnum_teeth2\u001b[39m}\u001b[39;00m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> 39\u001b[0m gear_calculation()\n",
      "Cell \u001b[1;32mIn[12], line 8\u001b[0m, in \u001b[0;36mgear_calculation\u001b[1;34m()\u001b[0m\n\u001b[0;32m      6\u001b[0m outer_diameter2 \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mEnter the outer diameter of wheel 2 (optional): \u001b[39m\u001b[39m\"\u001b[39m) \u001b[39mor\u001b[39;00m \u001b[39m0\u001b[39m)\n\u001b[0;32m      7\u001b[0m pitch \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mEnter the pitch (mm): \u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[1;32m----> 8\u001b[0m tooth_height \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mEnter the tooth height (mm): \u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[0;32m      9\u001b[0m center_distance \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mEnter the center distance of gears (mm): \u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     10\u001b[0m module \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mEnter the module (mm): \u001b[39m\u001b[39m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: could not convert string to float: ''"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def gear_calculation():\n",
    "    # Optional inputs\n",
    "    outer_diameter1 = float(input(\"Enter the outer diameter of wheel 1 (optional): \") or 0)\n",
    "    outer_diameter2 = float(input(\"Enter the outer diameter of wheel 2 (optional): \") or 0)\n",
    "    pitch = float(input(\"Enter the pitch (mm): \"))\n",
    "    tooth_height = float(input(\"Enter the tooth height (mm): \"))\n",
    "    center_distance = float(input(\"Enter the center distance of gears (mm): \"))\n",
    "    module = float(input(\"Enter the module (mm): \"))\n",
    "    pressure_angle = float(input(\"Enter the pressure angle (degrees): \"))\n",
    "    num_teeth1 = int(input(\"Enter the number of teeth for wheel 1 (default: 12): \") or 12)\n",
    "    num_teeth2 = int(input(\"Enter the number of teeth for wheel 2 (default: 24): \") or 24)\n",
    "\n",
    "    # Calculate primitive diameter\n",
    "    primitive_diameter = pitch * num_teeth1 / math.cos(math.radians(pressure_angle))\n",
    "\n",
    "    # Calculate outer diameter\n",
    "    if outer_diameter1 == 0:\n",
    "        outer_diameter1 = primitive_diameter + 2 * module\n",
    "    if outer_diameter2 == 0:\n",
    "        outer_diameter2 = primitive_diameter + 2 * module\n",
    "\n",
    "    # Calculate center distance\n",
    "    center_distance_calculated = (primitive_diameter / 2) * (num_teeth1 + num_teeth2) / (2 * num_teeth1)\n",
    "\n",
    "    # Print the results\n",
    "    print(f\"Outer diameter of wheel 1: {outer_diameter1:.2f} mm\")\n",
    "    print(f\"Outer diameter of wheel 2: {outer_diameter2:.2f} mm\")\n",
    "    print(f\"Pitch: {pitch:.2f} mm\")\n",
    "    print(f\"Tooth height: {tooth_height:.2f} mm\")\n",
    "    print(f\"Center distance of gears: {center_distance:.2f} mm\")\n",
    "    print(f\"Primitive diameter: {primitive_diameter:.2f} mm\")\n",
    "    print(f\"Module: {module:.2f} mm\")\n",
    "    print(f\"Pressure angle: {pressure_angle:.2f} degrees\")\n",
    "    print(f\"Number of teeth for wheel 1: {num_teeth1}\")\n",
    "    print(f\"Number of teeth for wheel 2: {num_teeth2}\")\n",
    "    \n",
    "gear_calculation()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inserisci i dati richiesti:\n",
      "Errore: inserisci un valore numerico valido\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# chiedi all'utente di inserire i dati\n",
    "print(\"Inserisci i dati richiesti:\")\n",
    "try:\n",
    "    modulo = float(input(\"Modulo: \"))\n",
    "    numero_denti_1 = int(input(\"Numero di denti ruota 1: \"))\n",
    "    numero_denti_2 = int(input(\"Numero di denti ruota 2: \"))\n",
    "    passo = math.pi * modulo\n",
    "    altezza_dente = modulo\n",
    "    angolo_pressione = math.radians(20)\n",
    "    interasse = modulo * (numero_denti_1 + numero_denti_2) / 2\n",
    "    diametro_primitivo_1 = modulo * numero_denti_1\n",
    "    diametro_primitivo_2 = modulo * numero_denti_2\n",
    "    diametro_esterno_1 = diametro_primitivo_1 + 2 * altezza_dente\n",
    "    diametro_esterno_2 = diametro_primitivo_2 + 2 * altezza_dente\n",
    "    rapporto_rotazione = numero_denti_2 / numero_denti_1\n",
    "\n",
    "    # stampa i risultati\n",
    "    print(\"\\nRisultati:\")\n",
    "    print(\"Modulo: \", modulo)\n",
    "    print(\"Numero di denti ruota 1: \", numero_denti_1)\n",
    "    print(\"Numero di denti ruota 2: \", numero_denti_2)\n",
    "    print(\"Passo: \", passo)\n",
    "    print(\"Altezza dente: \", altezza_dente)\n",
    "    print(\"Angolo di pressione: \", math.degrees(angolo_pressione))\n",
    "    print(\"Interasse: \", interasse)\n",
    "    print(\"Diametro primitivo ruota 1: \", diametro_primitivo_1)\n",
    "    print(\"Diametro primitivo ruota 2: \", diametro_primitivo_2)\n",
    "    print(\"Diametro esterno ruota 1: \", diametro_esterno_1)\n",
    "    print(\"Diametro esterno ruota 2: \", diametro_esterno_2)\n",
    "    print(\"Rapporto di rotazione: \", rapporto_rotazione)\n",
    "except ValueError:\n",
    "    print(\"Errore: inserisci un valore numerico valido\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[17], line 4\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[39mimport\u001b[39;00m \u001b[39mmath\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[39m# Input dei dati obbligatori\u001b[39;00m\n\u001b[1;32m----> 4\u001b[0m module \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mInserisci il modulo: \u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[0;32m      5\u001b[0m base_diameter \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mInserisci il diametro alla base: \u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m      6\u001b[0m tooth_height \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mInserisci l\u001b[39m\u001b[39m'\u001b[39m\u001b[39maltezza del dente: \u001b[39m\u001b[39m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: could not convert string to float: ''"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# Input dei dati obbligatori\n",
    "module = float(input(\"Inserisci il modulo: \"))\n",
    "base_diameter = float(input(\"Inserisci il diametro alla base: \"))\n",
    "tooth_height = float(input(\"Inserisci l'altezza del dente: \"))\n",
    "pressure_angle = float(input(\"Inserisci l'angolo di pressione in gradi: \"))\n",
    "n_teeth1 = int(input(\"Inserisci il numero di denti della ruota 1: \"))\n",
    "n_teeth2 = int(input(\"Inserisci il numero di denti della ruota 2: \"))\n",
    "\n",
    "# Input dei dati opzionali\n",
    "interaxis = input(\"Inserisci l'interasse tra le ruote dentate (opzionale): \")\n",
    "if interaxis:\n",
    "    interaxis = float(interaxis)\n",
    "\n",
    "outer_diameter1 = input(\"Inserisci il diametro esterno della ruota 1 (opzionale): \")\n",
    "if outer_diameter1:\n",
    "    outer_diameter1 = float(outer_diameter1)\n",
    "\n",
    "outer_diameter2 = input(\"Inserisci il diametro esterno della ruota 2 (opzionale): \")\n",
    "if outer_diameter2:\n",
    "    outer_diameter2 = float(outer_diameter2)\n",
    "\n",
    "# Calcolo dei dati\n",
    "pitch_diameter1 = n_teeth1 * module\n",
    "pitch_diameter2 = n_teeth2 * module\n",
    "\n",
    "if not interaxis:\n",
    "    interaxis = (pitch_diameter1 + pitch_diameter2) / 2\n",
    "\n",
    "if not outer_diameter1:\n",
    "    outer_diameter1 = pitch_diameter1 + 2 * base_diameter\n",
    "if not outer_diameter2:\n",
    "    outer_diameter2 = pitch_diameter2 + 2 * base_diameter\n",
    "\n",
    "center_distance = interaxis + (pitch_diameter1 + pitch_diameter2) / 2\n",
    "\n",
    "gear_ratio = n_teeth2 / n_teeth1\n",
    "\n",
    "# Output dei dati\n",
    "print(\"\\nDiametro primitivo ruota 1: \", pitch_diameter1)\n",
    "print(\"Diametro primitivo ruota 2: \", pitch_diameter2)\n",
    "print(\"Diametro esterno ruota 1: \", outer_diameter1)\n",
    "print(\"Diametro esterno ruota 2: \", outer_diameter2)\n",
    "print(\"Passo: \", math.pi * module)\n",
    "print(\"Altezza dente: \", tooth_height)\n",
    "print(\"Angolo di pressione: \", pressure_angle, \" gradi\")\n",
    "print(\"Interasse ruote dentate: \", interaxis)\n",
    "print(\"Diametro primitivo corrispondente: \", center_distance)\n",
    "print(\"Rapporto di trasmissione: 1:\", gear_ratio)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 49) (2962869224.py, line 49)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[21], line 49\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(f\"Lunghezza asse: {\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 49)\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# function to calculate gear parameters\n",
    "def calculate_gear_parameters(d, h, z, m, alpha):\n",
    "    pd = m * z\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter = pd * math.cos(alpha)\n",
    "    pitch_diameter = pd / math.cos(alpha)\n",
    "    outside_diameter = pd + 2 * (addendum + h)\n",
    "    root_diameter = pd - 2 * dedendum\n",
    "    circular_pitch = math.pi * pd / z\n",
    "    center_distance = (d[0] + d[1]) / 2\n",
    "    rotation_ratio = z[1] / z[0]\n",
    "    length = math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2) + math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2)\n",
    "\n",
    "    return pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length\n",
    "\n",
    "# ask for type of input\n",
    "input_type = input(\"Tipo di input desiderato: 'opzionale' o 'completo'? \")\n",
    "\n",
    "# perform appropriate input based on type\n",
    "if input_type == \"opzionale\":\n",
    "    # ask for basic parameters\n",
    "    d = input(\"Inserire il diametro delle due ruote dentate (formato: diametro1,diametro2): \").split(\",\")\n",
    "    d = [float(x) for x in d]\n",
    "    m = float(input(\"Inserire il modulo: \"))\n",
    "    alpha = math.radians(float(input(\"Inserire l'angolo di pressione in gradi: \")))\n",
    "    z = input(\"Inserire il numero di denti delle due ruote dentate (formato: denti1,denti2): \").split(\",\")\n",
    "    z = [int(x) for x in z]\n",
    "    h = float(input(\"Inserire l'altezza del dente: \"))\n",
    "    \n",
    "    # calculate gear parameters\n",
    "    pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length = calculate_gear_parameters(d, h, z, m, alpha)\n",
    "\n",
    "    # print gear parameters\n",
    "    print(f\"Diametro primitivo: {pd:.2f} mm\")\n",
    "    print(f\"Addendum: {addendum:.2f} mm\")\n",
    "    print(f\"Dedendum: {dedendum:.2f} mm\")\n",
    "    print(f\"Working depth: {working_depth:.2f} mm\")\n",
    "    print(f\"Diametro alla base: {base_diameter:.2f} mm\")\n",
    "    print(f\"Diametro di passo: {pitch_diameter:.2f} mm\")\n",
    "    print(f\"Diametro esterno: {outside_diameter:.2f} mm\")\n",
    "    print(f\"Diametro di fondo: {root_diameter:.2f} mm\")\n",
    "    print(f\"Passo circolare: {circular_pitch:.2f} mm\")\n",
    "    print(f\"Interasse ruote dentate: {center_distance:.2f} mm\")\n",
    "    print(f\"Rapporto di rotazione: {rotation_ratio}\")\n",
    "    print(f\"Lunghezza asse: {\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 50) (2117313411.py, line 50)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[22], line 50\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(f\"Diametro primitivo: {pd:.2f} mm\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 50)\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# function to calculate gear parameters\n",
    "def calculate_gear_parameters(d, h, z, m, alpha, de=None, D=None):\n",
    "    pd = m * z\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    if de and D:\n",
    "        working_depth = (2 * m) / math.cos(alpha) - (de - D) / 2\n",
    "    else:\n",
    "        working_depth = 2.25 * m\n",
    "    base_diameter = pd * math.cos(alpha)\n",
    "    pitch_diameter = pd / math.cos(alpha)\n",
    "    outside_diameter = pd + 2 * (addendum + h)\n",
    "    root_diameter = pd - 2 * dedendum\n",
    "    circular_pitch = math.pi * pd / z\n",
    "    center_distance = (d[0] + d[1]) / 2\n",
    "    rotation_ratio = z[1] / z[0]\n",
    "    if de and D:\n",
    "        length = math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2) + math.sqrt((pd/2 + addendum + h + de/2)**2 + center_distance**2) + math.sqrt((pd/2 + addendum + h + D/2)**2 + center_distance**2)\n",
    "    else:\n",
    "        length = math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2) * 2\n",
    "\n",
    "    return pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length\n",
    "\n",
    "# ask for type of input\n",
    "input_type = input(\"Tipo di input desiderato: 'opzionale' o 'completo'? \")\n",
    "\n",
    "# perform appropriate input based on type\n",
    "if input_type == \"opzionale\":\n",
    "    # ask for basic parameters\n",
    "    d = input(\"Inserire il diametro delle due ruote dentate (formato: diametro1,diametro2): \").split(\",\")\n",
    "    d = [float(x) for x in d]\n",
    "    h = float(input(\"Inserire l'altezza del dente: \"))\n",
    "    z = input(\"Inserire il numero di denti delle due ruote dentate (formato: denti1,denti2): \").split(\",\")\n",
    "    z = [int(x) for x in z]\n",
    "    m = float(input(\"Inserire il modulo: \"))\n",
    "    alpha = math.radians(float(input(\"Inserire l'angolo di pressione in gradi: \")))\n",
    "    de_input = input(\"Inserire il diametro esterno delle ruote (formato: de1,de2), se non disponibile digitare 'no': \")\n",
    "    D_input = input(\"Inserire l'interasse delle ruote dentate, se non disponibile digitare 'no': \")\n",
    "    \n",
    "    if de_input.lower() != 'no' and D_input.lower() != 'no':\n",
    "        de = de_input.split(\",\")\n",
    "        D = float(D_input)\n",
    "        de = [float(x) for x in de]\n",
    "        # calculate gear parameters\n",
    "        pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length = calculate_gear_parameters(d, h, z, m, alpha, de, D)\n",
    "\n",
    "        # print gear parameters\n",
    "        print(f\"Diametro primitivo: {pd:.2f} mm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "incomplete input (2197360112.py, line 51)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[26], line 51\u001b[1;36m\u001b[0m\n\u001b[1;33m    elif input_type == \"completo\":\u001b[0m\n\u001b[1;37m                                  ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m incomplete input\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# function to calculate gear parameters\n",
    "def calculate_gear_parameters(d, h, z, m, alpha):\n",
    "    pd = m * z\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter = pd * math.cos(alpha)\n",
    "    pitch_diameter = pd / math.cos(alpha)\n",
    "    outside_diameter = pd + 2 * (addendum + h)\n",
    "    root_diameter = pd - 2 * dedendum\n",
    "    circular_pitch = math.pi * pd / z\n",
    "    center_distance = (d[0] + d[1]) / 2\n",
    "    rotation_ratio = z[1] / z[0]\n",
    "    length = math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2) + math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2)\n",
    "\n",
    "    return pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length\n",
    "\n",
    "# ask for type of input\n",
    "input_type = input(\"Tipo di input desiderato: 'opzionale' o 'completo'? \")\n",
    "\n",
    "# perform appropriate input based on type\n",
    "if input_type == \"opzionale\":\n",
    "    # ask for basic parameters\n",
    "    d = input(\"Inserire il diametro delle due ruote dentate (formato: diametro1,diametro2): \").split(\",\")\n",
    "    d = [float(x) for x in d]\n",
    "    m = float(input(\"Inserire il modulo: \"))\n",
    "    alpha = math.radians(float(input(\"Inserire l'angolo di pressione in gradi: \")))\n",
    "    z = input(\"Inserire il numero di denti delle due ruote dentate (formato: denti1,denti2): \").split(\",\")\n",
    "    z = [int(x) for x in z]\n",
    "    h = float(input(\"Inserire l'altezza del dente: \"))\n",
    "    \n",
    "    # calculate gear parameters\n",
    "    pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length = calculate_gear_parameters(d, h, z, m, alpha)\n",
    "\n",
    "    # print gear parameters\n",
    "    print(f\"Diametro primitivo: {pd:.2f} mm\")\n",
    "    print(f\"Addendum: {addendum:.2f} mm\")\n",
    "    print(f\"Dedendum: {dedendum:.2f} mm\")\n",
    "    print(f\"Working depth: {working_depth:.2f} mm\")\n",
    "    print(f\"Diametro alla base: {base_diameter:.2f} mm\")\n",
    "    print(f\"Diametro di passo: {pitch_diameter:.2f} mm\")\n",
    "    print(f\"Diametro esterno: {outside_diameter:.2f} mm\")\n",
    "    print(f\"Diametro di fondo: {root_diameter:.2f} mm\")\n",
    "    print(f\"Passo circolare: {circular_pitch:.2f} mm\")\n",
    "    print(f\"Interasse ruote dentate: {center_distance:.2f} mm\")\n",
    "    print(f\"Rapporto di rotazione: {rotation_ratio}\")\n",
    "    print(f\"Lunghezza asse: {length:.2f} mm\")\n",
    "\n",
    "elif input_type == \"completo\":\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[27], line 37\u001b[0m\n\u001b[0;32m     35\u001b[0m z \u001b[39m=\u001b[39m [\u001b[39mint\u001b[39m(x) \u001b[39mfor\u001b[39;00m x \u001b[39min\u001b[39;00m z]\n\u001b[0;32m     36\u001b[0m h \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mInserire l\u001b[39m\u001b[39m'\u001b[39m\u001b[39maltezza del dente: \u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[1;32m---> 37\u001b[0m alpha \u001b[39m=\u001b[39m math\u001b[39m.\u001b[39mradians(\u001b[39mfloat\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mInserire l\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39mangolo di pressione in gradi: \u001b[39;49m\u001b[39m\"\u001b[39;49m)))\n\u001b[0;32m     38\u001b[0m m \u001b[39m=\u001b[39m pd \u001b[39m/\u001b[39m z[\u001b[39m0\u001b[39m]\n\u001b[0;32m     40\u001b[0m \u001b[39m# ask for optional parameters\u001b[39;00m\n",
      "\u001b[1;31mValueError\u001b[0m: could not convert string to float: ''"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# function to calculate gear parameters\n",
    "def calculate_gear_parameters(d, h, z, m, alpha, c=None, do=None):\n",
    "    pd = m * z\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    if c is None:\n",
    "        center_distance = (d[0] + d[1]) / 2\n",
    "    else:\n",
    "        center_distance = c\n",
    "    if do is None:\n",
    "        outside_diameter = pd + 2 * (addendum + h)\n",
    "    else:\n",
    "        outside_diameter = do\n",
    "    base_diameter = pd * math.cos(alpha)\n",
    "    pitch_diameter = pd / math.cos(alpha)\n",
    "    root_diameter = pd - 2 * dedendum\n",
    "    circular_pitch = math.pi * pd / z[0]\n",
    "    rotation_ratio = z[1] / z[0]\n",
    "    length = math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2) + math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2)\n",
    "\n",
    "    return pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length\n",
    "\n",
    "# ask for type of input\n",
    "input_type = input(\"Tipo di input desiderato: 'opzionale' o 'completo'? \")\n",
    "\n",
    "# perform appropriate input based on type\n",
    "if input_type == \"opzionale\":\n",
    "    # ask for basic parameters\n",
    "    d = input(\"Inserire il diametro delle due ruote dentate (formato: diametro1,diametro2): \").split(\",\")\n",
    "    d = [float(x) for x in d]\n",
    "    z = input(\"Inserire il numero di denti delle due ruote dentate (formato: denti1,denti2): \").split(\",\")\n",
    "    z = [int(x) for x in z]\n",
    "    h = float(input(\"Inserire l'altezza del dente: \"))\n",
    "    alpha = math.radians(float(input(\"Inserire l'angolo di pressione in gradi: \")))\n",
    "    m = pd / z[0]\n",
    "\n",
    "    # ask for optional parameters\n",
    "    c = input(\"Inserire l'interasse ruote dentate (opzionale): \")\n",
    "    if c:\n",
    "        c = float(c)\n",
    "    do = input(\"Inserire il diametro esterno (opzionale): \")\n",
    "    if do:\n",
    "        do = float(do)\n",
    "\n",
    "    # calculate gear parameters\n",
    "    pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length = calculate_gear_parameters(d, h, z, m, alpha, c=c, do=do)\n",
    "\n",
    "    # print gear parameters\n",
    "    print(f\"Diametro primitivo: {pd:.2f} mm\")\n",
    "    print(f\"Addendum: {addendum:.2f} mm\")\n",
    "    print(f\"Dedendum: {dedendum:.2f} mm\")\n",
    "    print(f\"Working depth: {working_depth:.2f} mm\")\n",
    "    print(f\"Diametro alla base: {base_diameter:.2f} mm\")\n",
    "    print(f\"Diametro di passo: {pitch_diameter:.2f} mm\")\n",
    "    print(f\"Diametro esterno: {outside_diameter:.2f} mm\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 51) (868869907.py, line 51)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[28], line 51\u001b[1;36m\u001b[0m\n\u001b[1;33m    d = input(\"Inserire il diametro delle due ruote dentate (formato: diametro1,diam\u001b[0m\n\u001b[1;37m              ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 51)\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# function to calculate gear parameters\n",
    "def calculate_gear_parameters(d, h, z, m):\n",
    "    pd = m * z\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter = pd * math.cos(math.pi/2)\n",
    "    pitch_diameter = pd\n",
    "    outside_diameter = pd + 2 * (addendum + h)\n",
    "    root_diameter = pd - 2 * dedendum\n",
    "    circular_pitch = math.pi * pd / z\n",
    "    center_distance = (d[0] + d[1]) / 2\n",
    "    rotation_ratio = z[1] / z[0]\n",
    "    length = math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2) + math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2)\n",
    "\n",
    "    return pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length\n",
    "\n",
    "# ask for type of input\n",
    "input_type = input(\"Tipo di input desiderato: 'opzionale' o 'completo'? \")\n",
    "\n",
    "# perform appropriate input based on type\n",
    "if input_type == \"opzionale\":\n",
    "    # ask for basic parameters\n",
    "    d = input(\"Inserire il diametro delle due ruote dentate (formato: diametro1,diametro2): \").split(\",\")\n",
    "    d = [float(x) for x in d]\n",
    "    z = input(\"Inserire il numero di denti delle due ruote dentate (formato: denti1,denti2): \").split(\",\")\n",
    "    z = [int(x) for x in z]\n",
    "    m = float(input(\"Inserire il modulo: \"))\n",
    "    h = float(input(\"Inserire l'altezza del dente: \"))\n",
    "    \n",
    "    # calculate gear parameters\n",
    "    pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length = calculate_gear_parameters(d, h, z, m)\n",
    "\n",
    "    # print gear parameters\n",
    "    print(f\"Diametro primitivo: {pd:.2f} mm\")\n",
    "    print(f\"Addendum: {addendum:.2f} mm\")\n",
    "    print(f\"Dedendum: {dedendum:.2f} mm\")\n",
    "    print(f\"Working depth: {working_depth:.2f} mm\")\n",
    "    print(f\"Diametro alla base: {base_diameter:.2f} mm\")\n",
    "    print(f\"Diametro di passo: {pitch_diameter:.2f} mm\")\n",
    "    print(f\"Diametro esterno: {outside_diameter:.2f} mm\")\n",
    "    print(f\"Diametro di fondo: {root_diameter:.2f} mm\")\n",
    "    print(f\"Passo circolare: {circular_pitch:.2f} mm\")\n",
    "    print(f\"Interasse ruote dentate: {center_distance:.2f} mm\")\n",
    "    print(f\"Rapporto di rotazione: {rotation_ratio}\")\n",
    "    print(f\"Lunghezza asse: {length:.2f} mm\")\n",
    "elif input_type == \"completo\":\n",
    "    # ask for all parameters\n",
    "    d = input(\"Inserire il diametro delle due ruote dentate (formato: diametro1,diam\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[30], line 22\u001b[0m\n\u001b[0;32m     20\u001b[0m center_distance \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mInserire l\u001b[39m\u001b[39m'\u001b[39m\u001b[39minterasse dei centri delle ruote dentate in mm: \u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     21\u001b[0m d1 \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mInserire il diametro esterno di uno dei due ingranaggi in mm: \u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[1;32m---> 22\u001b[0m z1 \u001b[39m=\u001b[39m \u001b[39mint\u001b[39;49m(\u001b[39minput\u001b[39;49m(\u001b[39m\"\u001b[39;49m\u001b[39mInserire il numero di denti dell\u001b[39;49m\u001b[39m'\u001b[39;49m\u001b[39mingranaggio 1: \u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[0;32m     23\u001b[0m m \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mInserire il modulo in mm: \u001b[39m\u001b[39m\"\u001b[39m))\n\u001b[0;32m     24\u001b[0m h \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(\u001b[39minput\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mInserire l\u001b[39m\u001b[39m'\u001b[39m\u001b[39maltezza del dente in mm: \u001b[39m\u001b[39m\"\u001b[39m))\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# function to calculate gear parameters\n",
    "def calculate_gear_parameters(d, h, z, m, center_distance):\n",
    "    pd = m * z\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter = pd * math.cos(math.pi/4)\n",
    "    pitch_diameter = pd / math.cos(math.pi/4)\n",
    "    outside_diameter = pd + 2 * (addendum + h)\n",
    "    root_diameter = pd - 2 * dedendum\n",
    "    circular_pitch = math.pi * pd / z\n",
    "    rotation_ratio = z[1] / z[0]\n",
    "    length = math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2) + math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2)\n",
    "\n",
    "    return pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, rotation_ratio, length\n",
    "\n",
    "# ask for input parameters\n",
    "center_distance = float(input(\"Inserire l'interasse dei centri delle ruote dentate in mm: \"))\n",
    "d1 = float(input(\"Inserire il diametro esterno di uno dei due ingranaggi in mm: \"))\n",
    "z1 = int(input(\"Inserire il numero di denti dell'ingranaggio 1: \"))\n",
    "m = float(input(\"Inserire il modulo in mm: \"))\n",
    "h = float(input(\"Inserire l'altezza del dente in mm: \"))\n",
    "\n",
    "# calculate diameter of second gear\n",
    "z2 = round(z1 * center_distance / (d1 * math.pi), 0)\n",
    "d2 = z2 * m\n",
    "\n",
    "# calculate gear parameters\n",
    "d = [d1, d2]\n",
    "z = [z1, z2]\n",
    "pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, rotation_ratio, length = calculate_gear_parameters(d, h, z, m, center_distance)\n",
    "\n",
    "# print gear parameters\n",
    "print(f\"Diametro primitivo: {pd:.2f} mm\")\n",
    "print(f\"Addendum: {addendum:.2f} mm\")\n",
    "print(f\"Dedendum: {dedendum:.2f} mm\")\n",
    "print(f\"Working depth: {working_depth:.2f} mm\")\n",
    "print(f\"Diametro alla base: {base_diameter:.2f} mm\")\n",
    "print(f\"Diametro di passo: {pitch_diameter:.2f} mm\")\n",
    "print(f\"Diametro esterno: {outside_diameter:.2f} mm\")\n",
    "print(f\"Diametro di fondo: {root_diameter:.2f} mm\")\n",
    "print(f\"Passo circolare: {circular_pitch:.2f} mm\")\n",
    "print(f\"Interasse ruote dentate: {center_distance:.2f} mm\")\n",
    "print(f\"Rapporto di rotazione: {rotation_ratio}\")\n",
    "print(f\"Lunghezza asse: {length:.2f} mm\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "# function to calculate gear parameters\n",
    "def calculate_gear_parameters(d, h, z, m):\n",
    "    if h:\n",
    "        addendum = m\n",
    "        dedendum = 1.25 * m\n",
    "        working_depth = 2.25 * m\n",
    "    elif z:\n",
    "        addendum = m\n",
    "        dedendum = 1.25 * m\n",
    "        working_depth = 2.25 * m\n",
    "        h = 2.25 * m\n",
    "        z2 = z[1] if len(z) > 1 else z[0]\n",
    "        z1 = z[0] if len(z) > 1 else z[0] * z2\n",
    "        alpha = math.atan((z1 + z2) * m / (2 * d))\n",
    "    else:\n",
    "        raise ValueError(\"Devi fornire o l'altezza del dente o il numero di denti di una delle ruote dentate.\")\n",
    "    pd = m * z1\n",
    "    base_diameter = pd * math.cos(alpha)\n",
    "    pitch_diameter = pd / math.cos(alpha)\n",
    "    outside_diameter = pd + 2 * (addendum + h)\n",
    "    root_diameter = pd - 2 * dedendum\n",
    "    circular_pitch = math.pi * pd / z1\n",
    "    center_distance = d\n",
    "    rotation_ratio = z2 / z1\n",
    "    length = math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2) + math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2)\n",
    "    return pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length\n",
    "\n",
    "# ask for type of input\n",
    "input_type = input(\"Tipo di input desiderato: 'opzionale' o 'completo'? \")\n",
    "\n",
    "# perform appropriate input based on type\n",
    "if input_type == \"opzionale\":\n",
    "    # ask for optional parameters\n",
    "    z = input(\"Inserire il numero di denti delle due ruote dentate (formato: denti1,denti2): \").split(\",\")\n",
    "    z = [int(x) for x in z]\n",
    "    h = input(\"Inserire l'altezza del dente: \")\n",
    "    h = float(h) if h else None\n",
    "else:\n",
    "    # ask for required parameters\n",
    "    d = float(input(\"Inserire l'interasse delle due ruote dentate: \"))\n",
    "    de = float(input(\"Inserire il diametro esterno di una delle ruote dentate: \"))\n",
    "    m = float(input(\"Inserire il modulo: \"))\n",
    "    alpha = math.radians(float(input(\"Inserire l'angolo di pressione in gradi: \")))\n",
    "    z1 = int(input(\"Inserire il numero di denti della ruota dentata di cui si conosce il diametro esterno: \"))\n",
    "    z2 = int(input(\"Inserire il numero di denti dell'altra ruota dentata: \"))\n",
    "    d = math.sqrt((z1 + z2) * m**2 / (4 * math.sin(alpha)**2) + (de/2)**2)\n",
    "    \n",
    "    # calculate gear parameters\n",
    "    pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diametro primitivo: 63.00 mm\n",
      "Addendum: 1.00 mm\n",
      "Dedendum: 1.25 mm\n",
      "Working depth: 2.25 mm\n",
      "Diametro alla base: 63.00 mm\n",
      "Diametro di passo: 63.00 mm\n",
      "Diametro esterno: 22.00 mm\n",
      "Diametro di fondo: 60.50 mm\n",
      "Passo circolare: 3.14 mm\n",
      "Interasse ruote dentate: 20.00 mm\n",
      "Rapporto di rotazione: 1.00\n",
      "Lunghezza asse: 173.82 mm\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# function to calculate gear parameters\n",
    "def calculate_gear_parameters(center_distance, d, h=None, z=None, m=1):\n",
    "    if z is None:\n",
    "        z = int(round((d * math.pi) / m))\n",
    "\n",
    "    pd = m * z\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter = pd\n",
    "    pitch_diameter = pd\n",
    "    outside_diameter = d + 2 * (addendum + (h or 0))\n",
    "    root_diameter = pd - 2 * dedendum\n",
    "    circular_pitch = math.pi * pd / z\n",
    "    rotation_ratio = 1\n",
    "\n",
    "    if center_distance > 0:\n",
    "        rotation_ratio = d / center_distance\n",
    "        length = math.sqrt(((d + pd) / 2)**2 - ((d - pd) / 2)**2) * 2 + center_distance * (math.pi + 2)\n",
    "    else:\n",
    "        length = math.sqrt((pd / 2 + addendum + (h or 0))**2 + ((d + pd) / 2)**2) * 2\n",
    "\n",
    "    return pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, rotation_ratio, length\n",
    "\n",
    "# ask for input\n",
    "center_distance = float(input(\"Inserire l'interasse delle due ruote dentate: \"))\n",
    "d = float(input(\"Inserire il diametro esterno di una delle due ruote dentate: \"))\n",
    "h = input(\"Inserire l'altezza del dente (opzionale): \")\n",
    "if h:\n",
    "    h = float(h)\n",
    "\n",
    "# calculate gear parameters\n",
    "pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, rotation_ratio, length = calculate_gear_parameters(center_distance, d, h=h)\n",
    "\n",
    "# print gear parameters\n",
    "print(f\"Diametro primitivo: {pd:.2f} mm\")\n",
    "print(f\"Addendum: {addendum:.2f} mm\")\n",
    "print(f\"Dedendum: {dedendum:.2f} mm\")\n",
    "print(f\"Working depth: {working_depth:.2f} mm\")\n",
    "print(f\"Diametro alla base: {base_diameter:.2f} mm\")\n",
    "print(f\"Diametro di passo: {pitch_diameter:.2f} mm\")\n",
    "print(f\"Diametro esterno: {outside_diameter:.2f} mm\")\n",
    "print(f\"Diametro di fondo: {root_diameter:.2f} mm\")\n",
    "print(f\"Passo circolare: {circular_pitch:.2f} mm\")\n",
    "print(f\"Interasse ruote dentate: {center_distance:.2f} mm\")\n",
    "print(f\"Rapporto di rotazione: {rotation_ratio:.2f}\")\n",
    "print(f\"Lunghezza asse: {length:.2f} mm\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for /: 'float' and 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[8], line 37\u001b[0m\n\u001b[0;32m     34\u001b[0m     m \u001b[39m=\u001b[39m \u001b[39mfloat\u001b[39m(m)\n\u001b[0;32m     36\u001b[0m \u001b[39m# calculate gear parameters\u001b[39;00m\n\u001b[1;32m---> 37\u001b[0m pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length \u001b[39m=\u001b[39m calculate_gear_parameters(d, h, z, m)\n\u001b[0;32m     39\u001b[0m \u001b[39m# print gear parameters\u001b[39;00m\n\u001b[0;32m     40\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mDiametrul primitiv: \u001b[39m\u001b[39m{\u001b[39;00mpd\u001b[39m:\u001b[39;00m\u001b[39m.2f\u001b[39m\u001b[39m}\u001b[39;00m\u001b[39m mm\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "Cell \u001b[1;32mIn[8], line 6\u001b[0m, in \u001b[0;36mcalculate_gear_parameters\u001b[1;34m(d, h, z, m)\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mcalculate_gear_parameters\u001b[39m(d, h\u001b[39m=\u001b[39m\u001b[39m0\u001b[39m, z\u001b[39m=\u001b[39m[\u001b[39m0\u001b[39m, \u001b[39m0\u001b[39m], m\u001b[39m=\u001b[39m\u001b[39m0.0\u001b[39m):\n\u001b[0;32m      5\u001b[0m     \u001b[39mif\u001b[39;00m z[\u001b[39m0\u001b[39m] \u001b[39m==\u001b[39m \u001b[39m0\u001b[39m:\n\u001b[1;32m----> 6\u001b[0m         z[\u001b[39m0\u001b[39m] \u001b[39m=\u001b[39m \u001b[39mround\u001b[39m(d[\u001b[39m0\u001b[39;49m] \u001b[39m/\u001b[39;49m m)\n\u001b[0;32m      7\u001b[0m     \u001b[39mif\u001b[39;00m z[\u001b[39m1\u001b[39m] \u001b[39m==\u001b[39m \u001b[39m0\u001b[39m:\n\u001b[0;32m      8\u001b[0m         z[\u001b[39m1\u001b[39m] \u001b[39m=\u001b[39m \u001b[39mround\u001b[39m(d[\u001b[39m1\u001b[39m] \u001b[39m/\u001b[39m m)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for /: 'float' and 'str'"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "# funcție pentru calcularea parametrilor angrenajului\n",
    "def calculate_gear_parameters(d, h=0, z=[0, 0], m=0.0):\n",
    "    if z[0] == 0:\n",
    "        z[0] = round(d[0] / m)\n",
    "    if z[1] == 0:\n",
    "        z[1] = round(d[1] / m)\n",
    "    pd = m * z[0]\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter = pd * math.cos(math.radians(20))\n",
    "    pitch_diameter = pd / math.cos(math.radians(20))\n",
    "    outside_diameter = pd + 2 * (addendum + h)\n",
    "    root_diameter = pd - 2 * dedendum\n",
    "    circular_pitch = math.pi * pd / z[0]\n",
    "    center_distance = d[1] - d[0]\n",
    "    rotation_ratio = z[1] / z[0]\n",
    "    length = math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2) + math.sqrt((pd/2 + addendum + h + base_diameter/2)**2 + center_distance**2)\n",
    "\n",
    "    return pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length\n",
    "\n",
    "# ask for input parameters\n",
    "d = input(\"Introduceți distanța interaxială și diametrul exterior al unuia dintre angrenaje (format: distanta,diametru): \").split(\",\")\n",
    "d = [float(x) for x in d]\n",
    "h = input(\"Introduceți înălțimea dintelui (opțional): \")\n",
    "if h != \"\":\n",
    "    h = float(h)\n",
    "z = input(\"Introduceți numărul de dinți al celor două angrenaje (opțional, format: dinti1,dinti2): \").split(\",\")\n",
    "z = [int(x) if x != \"\" else 0 for x in z]\n",
    "m = input(\"Introduceți modulul (opțional): \")\n",
    "if m != \"\":\n",
    "    m = float(m)\n",
    "\n",
    "# calculate gear parameters\n",
    "pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, center_distance, rotation_ratio, length = calculate_gear_parameters(d, h, z, m)\n",
    "\n",
    "# print gear parameters\n",
    "print(f\"Diametrul primitiv: {pd:.2f} mm\")\n",
    "print(f\"Înălțimea capului: {addendum:.2f} mm\")\n",
    "print(f\"Înălțimea piciorului: {dedendum:.2f} mm\")\n",
    "print(f\"Adâncimea de lucru: {working_depth:.2f} mm\")\n",
    "print(f\"Diametrul de bază: {base_diameter:.2f} mm\")\n",
    "print(f\"Diametrul de pas: {pitch_diameter:.2f} mm\")\n",
    "print(f\"Diametrul exterior: {outside_diameter:.2f} mm\")\n",
    "print(f\"Diametrul de rădăcină: {root_diameter:.2f} mm\")\n",
    "print(f\"Pasa circulară: {circular_pitch:.2f} mm\")\n",
    "print(f\"Distanța dintre axe: {length:.2f} mm\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "# functia pentru calcularea parametrilor angrenajului\n",
    "def calculeaza_parametrii_angrenaj(distanța_centrelor, d, h=None, z=None, m=1):\n",
    "    if z is None:\n",
    "        z = int(round((d * math.pi) / m))\n",
    "\n",
    "    pd = m * z\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter = pd\n",
    "    pitch_diameter = pd\n",
    "    outside_diameter = d + 2 * (addendum + (h or 0))\n",
    "    root_diameter = pd - 2 * dedendum\n",
    "    circular_pitch = math.pi * pd / z\n",
    "    rotation_ratio = 1\n",
    "\n",
    "    if distanța_centrelor > 0:\n",
    "        rotation_ratio = d / distanța_centrelor\n",
    "        length = math.sqrt(((d + pd) / 2)**2 - ((d - pd) / 2)**2) * 2 + distanța_centrelor * (math.pi + 2)\n",
    "    else:\n",
    "        length = math.sqrt((pd / 2 + addendum + (h or 0))**2 + ((d + pd) / 2)**2) * 2\n",
    "\n",
    "    return pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, rotation_ratio, length, z\n",
    "\n",
    "# solicită datele de intrare\n",
    "distanța_centrelor = float(input(\"Introduceți distanța dintre cele două roți dantate: \"))\n",
    "d = float(input(\"Introduceți diametrul exterior al uneia dintre roțile dantate: \"))\n",
    "h = input(\"Introduceți înălțimea dintelui (opțional): \")\n",
    "if h:\n",
    "    h = float(h)\n",
    "\n",
    "# calculează parametrii angrenajului\n",
    "pd, addendum, dedendum, working_depth, base_diameter, pitch_diameter, outside_diameter, root_diameter, circular_pitch, rotation_ratio, length, z = calculeaza_parametrii_angrenaj(distanța_centrelor, d, h=h)\n",
    "\n",
    "# afișează parametrii angrenajului\n",
    "print(f\"Diametru primitiv: {pd:.2f} mm\")\n",
    "print(f\"Înălțimea capului: {addendum:.2f} mm\")\n",
    "print(f\"Înălțimea piciorului: {dedendum:.2f} mm\")\n",
    "print(f\"Adâncimea de lucru: {working_depth:.2f} mm\")\n",
    "print(f\"Diametru de bază: {base_diameter:.2f} mm\")\n",
    "print(f\"Diametru de pas: {pitch_diameter:.2f} mm\")\n",
    "print(f\"Diametru exterior: {outside_diameter:.2f} mm\")\n",
    "print(f\"Diametru de bază al dintelui: {root_diameter:.2f} mm\")\n",
    "print(f\"Pas circular: {circular_pitch:.2f} mm\")\n",
    "print(f\"Distanța dintre centrelor: {distanța_centrelor:.2f} mm\")\n",
    "print(f\"Raport de rotație\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def calcola_parametri_ingranaggio(interasse, diametro, altezza_dente=None, num_denti=None, modulo=1):\n",
    "    if num_denti is None:\n",
    "        num_denti = int(round((diametro * math.pi) / modulo))\n",
    "\n",
    "    passo_diametrale = modulo * num_denti\n",
    "    addendum = modulo\n",
    "    dedendum = 1.25 * modulo\n",
    "    profondita_lavoro = 2.25 * modulo\n",
    "    diametro_base = passo_diametrale\n",
    "    diametro_primitivo = passo_diametrale\n",
    "    diametro_esterno = diametro + 2 * (addendum + (altezza_dente or 0))\n",
    "    diametro_fondo = passo_diametrale - 2 * dedendum\n",
    "    passo_circolare = math.pi * passo_diametrale / num_denti\n",
    "    rapporto_rotazione = 1\n",
    "\n",
    "    if interasse > 0:\n",
    "        rapporto_rotazione = diametro / interasse\n",
    "        lunghezza_asse = math.sqrt(((diametro + passo_diametrale) / 2)**2 - ((diametro - passo_diametrale) / 2)**2) * 2 + interasse * (math.pi + 2)\n",
    "    else:\n",
    "        lunghezza_asse = math.sqrt((passo_diametrale / 2 + addendum + (altezza_dente or 0))**2 + ((diametro + passo_diametrale) / 2)**2) * 2\n",
    "\n",
    "    return passo_diametrale, addendum, dedendum, profondita_lavoro, diametro_base, diametro_primitivo, diametro_esterno, diametro_fondo, passo_circolare, rapporto_rotazione, lunghezza_asse\n",
    "\n",
    "interasse = float(input(\"Inserisci l'interasse dei due ingranaggi: \"))\n",
    "diametro = float(input(\"Inserisci il diametro esterno di uno dei due ingranaggi: \"))\n",
    "altezza_dente = input(\"Inserisci l'altezza del dente (opzionale): \")\n",
    "if altezza_dente:\n",
    "    altezza_dente = float(altezza_dente)\n",
    "\n",
    "num_denti = input(\"Inserisci il numero di denti (opzionale): \")\n",
    "if num_denti:\n",
    "    num_denti = int(num_denti)\n",
    "\n",
    "passo_diametrale, addendum, dedendum, profondita_lavoro, diametro_base, diametro_primitivo, diametro_esterno, diametro_fondo, passo_circolare, rapporto_rotazione, lunghezza_asse = calcola_parametri_ingranaggio(interasse, diametro, altezza_dente, num_denti)\n",
    "\n",
    "print(f\"Passo diametrale: {passo_diametrale:.2f} mm\")\n",
    "print(f\"Addendum: {addendum:.2f} mm\")\n",
    "print(f\"Dedendum: {dedendum:.2f} mm\")\n",
    "print(f\"Profondità di lavoro: {profondita_lavoro:.2f} mm\")\n",
    "print(f\"Diametro alla base: {diametro_base:.2f} mm\")\n",
    "print(f\"Diametro primitivo: {diametro_primitivo:.2f} mm\")\n",
    "print(f\"Diametro esterno: {diametro_esterno:.2f} mm\")\n",
    "print(f\"Diametro di fondo: {diametro_fondo:.2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def calcola_parametri_ingranaggio(distanza_centri, diametro_esterno, altezza_dente=None, numero_denti=None, modulo=1):\n",
    "    if numero_denti is None:\n",
    "        numero_denti = round((diametro_esterno * math.pi) / modulo)\n",
    "\n",
    "    diametro_primitivo = modulo * numero_denti\n",
    "    altezza_testa = modulo\n",
    "    altezza_piede = 1.25 * modulo\n",
    "    profondita_lavorazione = 2.25 * modulo\n",
    "    diametro_base = diametro_primitivo\n",
    "    diametro_cerchio_di_passo = diametro_primitivo\n",
    "    diametro_esterno_effettivo = diametro_esterno + 2 * (altezza_testa + (altezza_dente or 0))\n",
    "    diametro_fondo = diametro_primitivo - 2 * altezza_piede\n",
    "    passo_circolare = math.pi * diametro_primitivo / numero_denti\n",
    "    rapporto_rotazione = 1\n",
    "\n",
    "    if distanza_centri > 0:\n",
    "        rapporto_rotazione = diametro_esterno / distanza_centri\n",
    "        lunghezza_asse = math.sqrt(((diametro_esterno + diametro_primitivo) / 2)**2 - ((diametro_esterno - diametro_primitivo) / 2)**2) * 2 + distanza_centri * (math.pi + 2)\n",
    "    else:\n",
    "        lunghezza_asse = math.sqrt((diametro_primitivo / 2 + altezza_testa + (altezza_dente or 0))**2 + ((diametro_esterno + diametro_primitivo) / 2)**2) * 2\n",
    "\n",
    "    # Calcolo dell'angolo in gradi a intervalli di taglio dente\n",
    "    angolo_taglio_dente = 360 / (2 * numero_denti)\n",
    "\n",
    "    return diametro_primitivo, altezza_testa, altezza_piede, profondita_lavorazione, diametro_base, diametro_cerchio_di_passo, diametro_esterno_effettivo, diametro_fondo, passo_circolare, rapporto_rotazione, lunghezza_asse, angolo_taglio_dente\n",
    "\n",
    "# Richiesta dei dati in ingresso\n",
    "distanza_centri = float(input(\"Inserisci la distanza tra i centri delle due ruote dentate: \"))\n",
    "diametro_esterno = float(input(\"Inserisci il diametro esterno di una delle due ruote dentate: \"))\n",
    "altezza_dente = input(\"Inserisci l'altezza del dente (opzionale): \")\n",
    "if altezza_dente:\n",
    "    altezza_dente = float(altezza_dente)\n",
    "\n",
    "# Calcolo dei parametri dell'ingranaggio\n",
    "diametro_primitivo, altezza_testa, altezza_piede, profondita_lavorazione, diametro_base, diametro_cerchio_di_passo, diametro_esterno_effettivo, diametro_fondo, passo_circolare, rapporto_rotazione, lunghezza_asse, angolo_taglio_dente = calcola_parametri_ingranaggio(distanza_centri, diametro_esterno, altezza_dente)\n",
    "\n",
    "# Stampa dei parametri dell'ingranaggio\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def calcola_parametri_ingranaggio(diametro_primitivo, modulo, altezza_testa=None, numero_denti=None):\n",
    "    if numero_denti is None:\n",
    "        numero_denti = int(round((diametro_primitivo * math.pi) / modulo))\n",
    "\n",
    "    passo_diametrale = math.pi / modulo\n",
    "    addendum = modulo\n",
    "    dedendum = 1.25 * modulo\n",
    "    profondita_lavoro = 2.25 * modulo\n",
    "    diametro_di_base = diametro_primitivo * math.cos(math.radians(20))\n",
    "    diametro_di_testa = diametro_primitivo + 2 * altezza_testa if altezza_testa else 0\n",
    "    diametro_fondo = diametro_primitivo - 2 * dedendum\n",
    "    passo_circolare = math.pi * diametro_primitivo / numero_denti\n",
    "    angolo_divisore = 360 / (2 * numero_denti)\n",
    "\n",
    "    return numero_denti, passo_diametrale, addendum, dedendum, profondita_lavoro, diametro_di_base, diametro_di_testa, diametro_fondo, passo_circolare, angolo_divisore\n",
    "\n",
    "# Input dati\n",
    "diametro_primitivo = float(input(\"Inserisci il diametro primitivo dell'ingranaggio: \"))\n",
    "modulo = float(input(\"Inserisci il modulo dell'ingranaggio: \"))\n",
    "altezza_testa = float(input(\"Inserisci l'altezza della testa (opzionale): \")) if input(\"Vuoi inserire l'altezza della testa? (y/n) \") == \"y\" else None\n",
    "\n",
    "# Calcolo dei parametri dell'ingranaggio\n",
    "numero_denti, passo_diametrale, addendum, dedendum, profondita_lavoro, diametro_di_base, diametro_di_testa, diametro_fondo, passo_circolare, angolo_divisore = calcola_parametri_ingranaggio(diametro_primitivo, modulo, altezza_testa)\n",
    "\n",
    "# Output dei risultati\n",
    "print(f\"Numero di denti: {numero_denti}\")\n",
    "print(f\"Passo diametrale: {passo_diametrale:.2f} mm\")\n",
    "print(f\"Altezza del dente: {addendum:.2f} mm\")\n",
    "print(f\"Altezza dello spazio: {dedendum:.2f} mm\")\n",
    "print(f\"Profondità di lavoro: {profondita_lavoro:.2f} mm\")\n",
    "print(f\"Diametro alla base: {diametro_di_base:.2f} mm\")\n",
    "if diametro_di_testa:\n",
    "    print(f\"Diametro alla testa: {diametro_di_testa:.2f} mm\")\n",
    "print(f\"Diametro di fondo: {diametro_fondo:.2f} mm\")\n",
    "print(f\"Passo circolare: {passo_circolare:.2f} mm\")\n",
    "print(f\"Angolo di divisione: {angolo_divisore:.2f} gradi\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diametro di passo: 18.79 mm\n",
      "Numero di denti: 59\n",
      "Dedendum: 1.25 mm\n",
      "Addendum: 1.00 mm\n",
      "Passo circolare: 3.14 mm\n",
      "Diametro alla base: 4.83 mm\n",
      "Diametro esterno: 24.50 mm\n",
      "Diametro di fondo: 16.29 mm\n",
      "Angolo di passo: 14.90 gradi\n",
      "Angolo di pressione: 20.00 gradi\n",
      "Backlash: 0.25 mm\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def calculate_gear_parameters(center_distance, diameter, height=None, module=1):\n",
    "    if not height:\n",
    "        height = 2.25 * module\n",
    "    \n",
    "    pitch_diameter = diameter * math.cos(math.radians(20)) # 20 degrees pressure angle\n",
    "    number_of_teeth = round(math.pi * pitch_diameter / module)\n",
    "    dedendum = 1.25 * module\n",
    "    addendum = module\n",
    "    circular_pitch = math.pi * module\n",
    "    base_diameter = pitch_diameter * math.cos(math.radians(90 - math.degrees(math.atan2(center_distance, 2 * pitch_diameter))))\n",
    "    outside_diameter = diameter + 2 * height\n",
    "    root_diameter = pitch_diameter - 2 * dedendum\n",
    "    pitch_angle = math.atan(center_distance / (2 * pitch_diameter))\n",
    "    pressure_angle = 20 # degrees\n",
    "    backlash = module * 0.25\n",
    "\n",
    "    return pitch_diameter, number_of_teeth, dedendum, addendum, circular_pitch, base_diameter, outside_diameter, root_diameter, pitch_angle, pressure_angle, backlash\n",
    "\n",
    "center_distance = float(input(\"Inserisci la distanza interasse: \"))\n",
    "diameter = float(input(\"Inserisci il diametro esterno dell'ingranaggio: \"))\n",
    "height = input(\"Inserisci l'altezza del dente (opzionale): \")\n",
    "if height:\n",
    "    height = float(height)\n",
    "\n",
    "pitch_diameter, number_of_teeth, dedendum, addendum, circular_pitch, base_diameter, outside_diameter, root_diameter, pitch_angle, pressure_angle, backlash = calculate_gear_parameters(center_distance, diameter, height)\n",
    "\n",
    "print(f\"Diametro di passo: {pitch_diameter:.2f} mm\")\n",
    "print(f\"Numero di denti: {number_of_teeth}\")\n",
    "print(f\"Dedendum: {dedendum:.2f} mm\")\n",
    "print(f\"Addendum: {addendum:.2f} mm\")\n",
    "print(f\"Passo circolare: {circular_pitch:.2f} mm\")\n",
    "print(f\"Diametro alla base: {base_diameter:.2f} mm\")\n",
    "print(f\"Diametro esterno: {outside_diameter:.2f} mm\")\n",
    "print(f\"Diametro di fondo: {root_diameter:.2f} mm\")\n",
    "print(f\"Angolo di passo: {math.degrees(pitch_angle):.2f} gradi\")\n",
    "print(f\"Angolo di pressione: {pressure_angle:.2f} gradi\")\n",
    "print(f\"Backlash: {backlash:.2f} mm\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "incomplete input (478615383.py, line 47)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[3], line 47\u001b[1;36m\u001b[0m\n\u001b[1;33m    \"rapporto_trasmissione\": 1 / rapporto\u001b[0m\n\u001b[1;37m                                         ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m incomplete input\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def calcola_parametri_ingranaggio(distanza_interasse, diametro_esterno, altezza_dente=None, numero_denti=None, modulo=1):\n",
    "    if numero_denti is None:\n",
    "        numero_denti = round((diametro_esterno * math.pi) / modulo)\n",
    "\n",
    "    passo_diametrale = modulo * math.pi\n",
    "    addendum = modulo\n",
    "    dedendum = 1.25 * modulo\n",
    "    profondita_lavorazione = 2.25 * modulo\n",
    "    diametro_base = diametro_esterno * math.cos(math.radians(20)) # angolo di pressione 20 gradi\n",
    "    diametro_cerchio_primitivo = modulo * numero_denti\n",
    "    diametro_primitivo = diametro_cerchio_primitivo * math.cos(math.radians(20)) # angolo di pressione 20 gradi\n",
    "    diametro_esterno_totale = diametro_esterno + 2 * (altezza_dente or 0) + 2 * addendum\n",
    "    diametro_fondo = diametro_cerchio_primitivo - 2 * dedendum\n",
    "    passo_circolare = math.pi * modulo\n",
    "    rapporto_trasmissione = diametro_esterno / diametro_cerchio_primitivo\n",
    "\n",
    "    angolo_intaglio = 2 * math.degrees(math.atan(diametro_base / (2 * (diametro_cerchio_primitivo - distanza_interasse / 2))))\n",
    "\n",
    "    return {\n",
    "        \"ingranaggio1\": {\n",
    "            \"diametro_cerchio_primitivo\": diametro_cerchio_primitivo,\n",
    "            \"diametro_primitivo\": diametro_primitivo,\n",
    "            \"diametro_base\": diametro_base,\n",
    "            \"passo_diametrale\": passo_diametrale,\n",
    "            \"addendum\": addendum,\n",
    "            \"dedendum\": dedendum,\n",
    "            \"profondita_lavorazione\": profondita_lavorazione,\n",
    "            \"diametro_esterno_totale\": diametro_esterno_totale,\n",
    "            \"diametro_fondo\": diametro_fondo,\n",
    "            \"passo_circolare\": passo_circolare,\n",
    "            \"rapporto_trasmissione\": rapporto_trasmissione,\n",
    "            \"angolo_intaglio\": angolo_intaglio\n",
    "        },\n",
    "        \"ingranaggio2\": {\n",
    "            \"diametro_cerchio_primitivo\": diametro_cerchio_primitivo * rapporto_trasmissione,\n",
    "            \"diametro_primitivo\": diametro_primitivo * rapporto_trasmissione,\n",
    "            \"diametro_base\": diametro_base * rapporto_trasmissione,\n",
    "            \"passo_diametrale\": passo_diametrale,\n",
    "            \"addendum\": addendum,\n",
    "            \"dedendum\": dedendum,\n",
    "            \"profondita_lavorazione\": profondita_lavorazione,\n",
    "            \"diametro_esterno_totale\": diametro_esterno_totale * rapporto_trasmissione,\n",
    "            \"diametro_fondo\": diametro_fondo * rapporto_trasmissione,\n",
    "            \"passo_circolare\": passo_circolare,\n",
    "            \"rapporto_trasmissione\": 1 / rapporto\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def calculate_gear_parameters(center_distance, d1, d2, h1=None, h2=None, z1=None, z2=None, m=1):\n",
    "    if z1 is None:\n",
    "        z1 = int(round((d1 * math.pi) / m))\n",
    "    if z2 is None:\n",
    "        z2 = int(round((d2 * math.pi) / m))\n",
    "\n",
    "    pd1 = m * z1\n",
    "    pd2 = m * z2\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter1 = pd1\n",
    "    base_diameter2 = pd2\n",
    "    pitch_diameter1 = pd1\n",
    "    pitch_diameter2 = pd2\n",
    "    outside_diameter1 = d1 + 2 * (addendum + (h1 or 0))\n",
    "    outside_diameter2 = d2 + 2 * (addendum + (h2 or 0))\n",
    "    root_diameter1 = pd1 - 2 * dedendum\n",
    "    root_diameter2 = pd2 - 2 * dedendum\n",
    "    circular_pitch1 = math.pi * pd1 / z1\n",
    "    circular_pitch2 = math.pi * pd2 / z2\n",
    "    rotation_ratio = d1 / d2\n",
    "    angle = 180 / z1\n",
    "\n",
    "    length = center_distance + (d1 + d2) / 2 * (math.pi / 180) * angle\n",
    "\n",
    "    angle_degrees = math.degrees(angle)\n",
    "    angle_minutes = (angle_degrees - int(angle_degrees)) * 60\n",
    "    angle_seconds = (angle_minutes - int(angle_minutes)) * 60\n",
    "\n",
    "    return pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length\n",
    "\n",
    "center_distance = float(input(\"Inserisci la distanza tra i centri delle due ruote dentate: \"))\n",
    "d1 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 1: \"))\n",
    "d2 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 2: \"))\n",
    "h1 = input(\"Inserisci l'altezza del dente dell'ingranaggio 1 (opzionale): \")\n",
    "h2 = input(\"Inserisci l'altezza del dente dell'ingranaggio 2 (opzionale): \")\n",
    "if h1:\n",
    "    h1 = float(h1)\n",
    "if h2:\n",
    "    h2 = float(h2)\n",
    "\n",
    "pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length = calculate_gear_parameters(center_distance, d1, d2, h1=h1, h2=h2)\n",
    "\n",
    "print(f\"Parametri dell'ingranaggio 1:\")\n",
    "print(f\"Diametro primitivo: {pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 1) (436938037.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[7], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    etro_passo\": diametro_passo,\u001b[0m\n\u001b[1;37m              ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 1)\n"
     ]
    }
   ],
   "source": [
    "etro_passo\": diametro_passo,\n",
    "            \"diametro_esterno\": diametro_esterno,\n",
    "            \"diametro_fondo\": diametro_fondo,\n",
    "            \"passo_circolare_angolare\": passo_circolare_angolare,\n",
    "            \"rotazione_1_2\": rotazione_1_2,\n",
    "            \"lunghezza\": lunghezza,\n",
    "            \"angolo_intaglio_denti\": f\"{gradi}° {primi}' {secondi}''\"},\n",
    "            \"ingranaggio_2\": {\n",
    "            \"numero_denti\": numero_denti,\n",
    "            \"passo_circolare\": passo_circolare,\n",
    "            \"addendum\": addendum,\n",
    "            \"dedendum\": dedendum,\n",
    "            \"profondita_lavoro\": profondita_lavoro,\n",
    "            \"diametro_base\": diametro_base,\n",
    "            \"diametro_passo\": diametro_passo,\n",
    "            \"diametro_esterno\": diametro_esterno,\n",
    "            print(f\"Diametro di passo: {pitch_diameter1}\")\n",
    "print(f\"Diametro esterno: {outside_diameter1}\")\n",
    "print(f\"Diametro alla radice: {root_diameter1}\")\n",
    "print(f\"Passo circolare: {circular_pitch1}\")\n",
    "print(f\"Numero di denti: {z1}\")\n",
    "print(f\"Altezza del dente: {h1}\")\n",
    "print(f\"Aggancio: {addendum}\")\n",
    "print(f\"Scavatura: {dedendum}\")\n",
    "print(f\"Profondità di lavoro: {working_depth}\")\n",
    "print(f\"\\nParametri dell'ingranaggio 2:\")\n",
    "print(f\"Diametro primitivo: {pd2}\")\n",
    "print(f\"Diametro di base: {base_diameter2}\")\n",
    "print(f\"Diametro di passo: {pitch_diameter2}\")\n",
    "print(f\"Diametro esterno: {outside_diameter2}\")\n",
    "print(f\"Diametro alla radice: {root_diameter2}\")\n",
    "print(f\"Passo circolare: {circular_pitch2}\")\n",
    "print(f\"Numero di denti: {z2}\")\n",
    "print(f\"Altezza del dente: {h2}\")\n",
    "print(f\"Aggancio: {addendum}\")\n",
    "print(f\"Scavatura: {dedendum}\")\n",
    "print(f\"Profondità di lavoro: {working_depth}\")\n",
    "print(f\"\\nRapporto di rotazione: {rotation_ratio}\")\n",
    "print(f\"Angolo di pressione: {angle_degrees}° {angle_minutes}' {angle_seconds}\\\"\")\n",
    "print(f\"Lunghezza totale degli assi: {length}\")import math\n",
    "\n",
    "# funzione per il calcolo dei parametri degli ingranaggi\n",
    "def calcola_parametri_ingranaggi(distanza_interasse, diametro_esterno, altezza_dente=None):\n",
    "    m = 1\n",
    "    if altezza_dente is None:\n",
    "        altezza_dente = 2.25 * m\n",
    "\n",
    "    numero_denti = int(round((diametro_esterno * math.pi) / m))\n",
    "\n",
    "    passo_circolare = m * numero_denti\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    profondita_lavoro = 2.25 * m\n",
    "    diametro_base = passo_circolare\n",
    "    diametro_passo = passo_circolare\n",
    "    diametro_esterno = diametro_esterno + 2 * (addendum + altezza_dente)\n",
    "    diametro_fondo = passo_circolare - 2 * dedendum\n",
    "    passo_circolare_angolare = 360 / numero_denti\n",
    "    rotazione_1_2 = diametro_esterno / diametro_passo\n",
    "    rotazione_2_1 = diametro_passo / diametro_esterno\n",
    "\n",
    "    lunghezza = math.sqrt(((diametro_esterno + passo_circolare) / 2)**2 - ((diametro_esterno - passo_circolare) / 2)**2) * 2 + distanza_interasse * (math.pi + 2)\n",
    "\n",
    "    angolo_intaglio_denti = math.degrees(math.atan2(passo_circolare * math.pi, distanza_interasse * math.pi))\n",
    "\n",
    "    gradi = int(angolo_intaglio_denti)\n",
    "    primi = int((angolo_intaglio_denti - gradi) * 60)\n",
    "    secondi = int((((angolo_intaglio_denti - gradi) * 60) - primi) * 60)\n",
    "\n",
    "    return {\n",
    "        \"ingranaggio_1\": {\n",
    "            \"numero_denti\": numero_denti,\n",
    "            \"passo_circolare\": passo_circolare,\n",
    "            \"addendum\": addendum,\n",
    "            \"dedendum\": dedendum,\n",
    "            \"profondita_lavoro\": profondita_lavoro,\n",
    "            \"diametro_base\": diametro_base,\n",
    "            \"diam\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def calculate_gear_parameters(center_distance, d1, d2, h1=None, h2=None, z1=None, z2=None, m=1):\n",
    "    if z1 is None:\n",
    "        z1 = int(round((d1 * math.pi) / m))\n",
    "    if z2 is None:\n",
    "        z2 = int(round((d2 * math.pi) / m))\n",
    "\n",
    "    pd1 = m * z1\n",
    "    pd2 = m * z2\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter1 = pd1\n",
    "    base_diameter2 = pd2\n",
    "    pitch_diameter1 = pd1\n",
    "    pitch_diameter2 = pd2\n",
    "    outside_diameter1 = d1 + 2 * (addendum + (h1 or 0))\n",
    "    outside_diameter2 = d2 + 2 * (addendum + (h2 or 0))\n",
    "    root_diameter1 = pd1 - 2 * dedendum\n",
    "    root_diameter2 = pd2 - 2 * dedendum\n",
    "    circular_pitch1 = math.pi * pd1 / z1\n",
    "    circular_pitch2 = math.pi * pd2 / z2\n",
    "    rotation_ratio = d1 / d2\n",
    "    angle = 180 / z1\n",
    "\n",
    "    length = center_distance + (d1 + d2) / 2 * (math.pi / 180) * angle\n",
    "\n",
    "    angle_degrees = math.degrees(angle)\n",
    "    angle_minutes = (angle_degrees - int(angle_degrees)) * 60\n",
    "    angle_seconds = (angle_minutes - int(angle_minutes)) * 60\n",
    "\n",
    "    return pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length\n",
    "\n",
    "center_distance = float(input(\"Inserisci la distanza tra i centri delle due ruote dentate: \"))\n",
    "d1 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 1: \"))\n",
    "d2 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 2: \"))\n",
    "h1 = input(\"Inserisci l'altezza del dente dell'ingranaggio 1 (opzionale): \")\n",
    "h2 = input(\"Inserisci l'altezza del dente dell'ingranaggio 2 (opzionale): \")\n",
    "if h1:\n",
    "    h1 = float(h1)\n",
    "if h2:\n",
    "    h2 = float(h2)\n",
    "\n",
    "pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length = calculate_gear_parameters(center_distance, d1, d2, h1=h1, h2=h2)\n",
    "\n",
    "print(f\"Parametri dell'ingranaggio 1:\")\n",
    "print(f\"Diametro primitivo: {pd1:.2f}\")\n",
    "print(f\"Altezza del dente: {h1:.2f}\" if h1 else \"Alte\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parametri dell'ingranaggio 1:\n",
      "Diametro primitivo: 63.00\n",
      "Altezza del dente: 2.00\n",
      "Diametro di passo: 63\n",
      "Diametro esterno: 26.0\n",
      "Diametro alla radice: 60.5\n",
      "Passo circolare: 3.141592653589793\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'z1' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[6], line 55\u001b[0m\n\u001b[0;32m     53\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mDiametro alla radice: \u001b[39m\u001b[39m{\u001b[39;00mroot_diameter1\u001b[39m}\u001b[39;00m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     54\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mPasso circolare: \u001b[39m\u001b[39m{\u001b[39;00mcircular_pitch1\u001b[39m}\u001b[39;00m\u001b[39m\"\u001b[39m)\n\u001b[1;32m---> 55\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mNumero di denti: \u001b[39m\u001b[39m{\u001b[39;00mz1\u001b[39m}\u001b[39;00m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     56\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mAltezza del dente: \u001b[39m\u001b[39m{\u001b[39;00mh1\u001b[39m}\u001b[39;00m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     57\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mAggancio: \u001b[39m\u001b[39m{\u001b[39;00maddendum\u001b[39m}\u001b[39;00m\u001b[39m\"\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'z1' is not defined"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def calculate_gear_parameters(center_distance, d1, d2, h1=None, h2=None, z1=None, z2=None, m=1):\n",
    "    if z1 is None:\n",
    "        z1 = int(round((d1 * math.pi) / m))\n",
    "    if z2 is None:\n",
    "        z2 = int(round((d2 * math.pi) / m))\n",
    "\n",
    "    pd1 = m * z1\n",
    "    pd2 = m * z2\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter1 = pd1\n",
    "    base_diameter2 = pd2\n",
    "    pitch_diameter1 = pd1\n",
    "    pitch_diameter2 = pd2\n",
    "    outside_diameter1 = d1 + 2 * (addendum + (h1 or 0))\n",
    "    outside_diameter2 = d2 + 2 * (addendum + (h2 or 0))\n",
    "    root_diameter1 = pd1 - 2 * dedendum\n",
    "    root_diameter2 = pd2 - 2 * dedendum\n",
    "    circular_pitch1 = math.pi * pd1 / z1\n",
    "    circular_pitch2 = math.pi * pd2 / z2\n",
    "    rotation_ratio = d1 / d2\n",
    "    angle = 180 / z1\n",
    "\n",
    "    length = center_distance + (d1 + d2) / 2 * (math.pi / 180) * angle\n",
    "\n",
    "    angle_degrees = math.degrees(angle)\n",
    "    angle_minutes = (angle_degrees - int(angle_degrees)) * 60\n",
    "    angle_seconds = (angle_minutes - int(angle_minutes)) * 60\n",
    "\n",
    "    return pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length\n",
    "\n",
    "center_distance = float(input(\"Inserisci la distanza tra i centri delle due ruote dentate: \"))\n",
    "d1 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 1: \"))\n",
    "d2 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 2: \"))\n",
    "h1 = input(\"Inserisci l'altezza del dente dell'ingranaggio 1 (opzionale): \")\n",
    "h2 = input(\"Inserisci l'altezza del dente dell'ingranaggio 2 (opzionale): \")\n",
    "if h1 != '':\n",
    "    h1 = float(h1)\n",
    "if h2 != '':\n",
    "    h2 = float(h2)\n",
    "\n",
    "\n",
    "pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length = calculate_gear_parameters(center_distance, d1, d2, h1=h1, h2=h2)\n",
    "\n",
    "print(f\"Parametri dell'ingranaggio 1:\")\n",
    "print(f\"Diametro primitivo: {pd1:.2f}\")\n",
    "print(f\"Altezza del dente: {h1:.2f}\" if h1 else \"Altezza del dente: N/A\")\n",
    "print(f\"Diametro di passo: {pitch_diameter1}\")\n",
    "print(f\"Diametro esterno: {outside_diameter1}\")\n",
    "print(f\"Diametro alla radice: {root_diameter1}\")\n",
    "print(f\"Passo circolare: {circular_pitch1}\")\n",
    "print(f\"Numero di denti: {z1}\")\n",
    "print(f\"Altezza del dente: {h1}\")\n",
    "print(f\"Aggancio: {addendum}\")\n",
    "print(f\"Scavatura: {dedendum}\")\n",
    "print(f\"PnProfondità di lavoro: {working_depth}\")\n",
    "print(f\"\\arametri dell'ingranaggio 2:\")\n",
    "print(f\"Diametro primitivo: {pd2}\")\n",
    "print(f\"Diametro di base: {base_diameter2}\")\n",
    "print(f\"Diametro di passo: {pitch_diameter2}\")\n",
    "print(f\"Diametro esterno: {outside_diameter2}\")\n",
    "print(f\"Diametro alla radice: {root_diameter2}\")\n",
    "print(f\"Passo circolare: {circular_pitch2}\")\n",
    "print(f\"Numero di denti: {z2}\")\n",
    "print(f\"Altezza del dente: {h2}\")\n",
    "print(f\"Aggancio: {addendum}\")\n",
    "print(f\"Scavatura: {dedendum}\")\n",
    "print(f\"Profondità di lavoro: {working_depth}\")\n",
    "print(f\"\\nRapporto di rotazione: {rotation_ratio}\")\n",
    "print(f\"Angolo di pressione: {angle_degrees}° {angle_minutes}' {angle_seconds}\\\"\")\n",
    "print(f\"Lunghezza totale degli assi: {length}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after function definition on line 3 (3998667440.py, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[9], line 4\u001b[1;36m\u001b[0m\n\u001b[1;33m    if z1 is None:\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after function definition on line 3\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def calculate_gear_parameters(center_distance, d1, d2, h1=None, h2=None, z1=None, z2=None, m=1):\n",
    "if z1 is None:\n",
    "z1 = int(round((d1 * math.pi) / m))\n",
    "if z2 is None:\n",
    "z2 = int(round((d2 * math.pi) / m))\n",
    "pd1 = m * z1\n",
    "pd2 = m * z2\n",
    "addendum = m\n",
    "dedendum = 1.25 * m\n",
    "working_depth = 2.25 * m\n",
    "base_diameter1 = pd1 - 2 * dedendum\n",
    "base_diameter2 = pd2 - 2 * dedendum\n",
    "pitch_diameter1 = pd1\n",
    "pitch_diameter2 = pd2\n",
    "outside_diameter1 = d1 + 2 * (addendum + (h1 or 0))\n",
    "outside_diameter2 = d2 + 2 * (addendum + (h2 or 0))\n",
    "root_diameter1 = pd1 - 2 * dedendum\n",
    "root_diameter2 = pd2 - 2 * dedendum\n",
    "circular_pitch1 = math.pi * pd1 / z1\n",
    "circular_pitch2 = math.pi * pd2 / z2\n",
    "rotation_ratio = d1 / d2\n",
    "angle = math.atan(center_distance / (d1/2 + d2/2))\n",
    "\n",
    "length = center_distance + (d1 + d2) / 2 * angle\n",
    "\n",
    "angle_degrees = math.degrees(angle)\n",
    "angle_minutes = (angle_degrees - int(angle_degrees)) * 60\n",
    "angle_seconds = (angle_minutes - int(angle_minutes)) * 60\n",
    "\n",
    "return pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length\n",
    "center_distance = float(input(\"Inserisci la distanza tra i centri delle due ruote dentate: \"))\n",
    "d1 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 1: \"))\n",
    "d2 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 2: \"))\n",
    "h1 = input(\"Inserisci l'altezza del dente dell'ingranaggio 1 (opzionale): \")\n",
    "h2 = input(\"Inserisci l'altezza del dente dell'ingranaggio 2 (opzionale): \")\n",
    "if h1 != '':\n",
    "h1 = float(h1)\n",
    "if h2 != '':\n",
    "h2 = float(h2)\n",
    "\n",
    "pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length = calculate_gear_parameters(center_distance, d1, d2, h1=h1, h2=h2)\n",
    "\n",
    "print(f\"Parametri dell'ingranaggio 1:\")\n",
    "print(f\"Diametro primitivo: {pd1:.2f}\")\n",
    "print(f\"Altezza del dente: {h1:.2f}\" if h1 else \"Altezza del dente: N/A\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "expected 'else' after 'if' expression (3931012503.py, line 43)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[11], line 43\u001b[1;36m\u001b[0m\n\u001b[1;33m    check if optional values are None or empty strings\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m expected 'else' after 'if' expression\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def calculate_gear_parameters(center_distance, d1, d2, h1=None, h2=None, z1=None, z2=None, m=1):\n",
    "    if z1 is None:\n",
    "        z1 = int(round((d1 * math.pi) / m))\n",
    "    if z2 is None:\n",
    "        z2 = int(round((d2 * math.pi) / m))\n",
    "\n",
    "    pd1 = m * z1\n",
    "    pd2 = m * z2\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter1 = pd1\n",
    "    base_diameter2 = pd2\n",
    "    pitch_diameter1 = pd1\n",
    "    pitch_diameter2 = pd2\n",
    "    outside_diameter1 = d1 + 2 * (addendum + (h1 or 0))\n",
    "    outside_diameter2 = d2 + 2 * (addendum + (h2 or 0))\n",
    "    root_diameter1 = pd1 - 2 * dedendum\n",
    "    root_diameter2 = pd2 - 2 * dedendum\n",
    "    circular_pitch1 = math.pi * pd1 / z1\n",
    "    circular_pitch2 = math.pi * pd2 / z2\n",
    "    rotation_ratio = d1 / d2\n",
    "    angle = math.degrees(math.atan2((d2-d1)/2, center_distance))\n",
    "\n",
    "    length = center_distance + (d1 + d2) / 2 * (math.pi / 180) * angle\n",
    "\n",
    "    angle_degrees = math.floor(angle)\n",
    "    angle_minutes = math.floor((angle - angle_degrees) * 60)\n",
    "    angle_seconds = (angle - angle_degrees - angle_minutes / 60) * 3600\n",
    "\n",
    "    return pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length, z1, z2\n",
    "\n",
    "center_distance = float(input(\"Inserisci la distanza tra i centri delle due ruote dentate: \"))\n",
    "d1 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 1: \"))\n",
    "d2 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 2: \"))\n",
    "h1 = input(\"Inserisci l'altezza del dente dell'ingranaggio 1 (opzionale): \")\n",
    "h2 = input(\"Inserisci l'altezza del dentedell'ingranaggio 2 (opzionale): \")\n",
    "z1 = input(\"Inserisci il numero di denti dell'ingranaggio 1 (opzionale): \")\n",
    "z2 = input(\"Inserisci il numero di denti dell'ingranaggio 2 (opzionale): \")\n",
    "m = float(input(\"Inserisci il modulo: \"))\n",
    "check if optional values are None or empty strings\n",
    "if not h1:\n",
    "h1 = None\n",
    "if not h2:\n",
    "h2 = None\n",
    "if not z1:\n",
    "z1 = None\n",
    "else:\n",
    "z1 = int(z1)\n",
    "if not z2:\n",
    "z2 = None\n",
    "else:\n",
    "z2 = int(z2)\n",
    "\n",
    "gear_parameters = calculate_gear_parameters(center_distance, d1, d2, h1, h2, z1, z2, m)\n",
    "print(f\"Parametri dell'ingranaggio 1: \\n\"\n",
    "print{f\"Numero di denti: {gear_parameters[-1]}\\n\"\n",
    "f\"Diametro primitivo: {gear_parameters[0]:.2f}\\n\"\n",
    "f\"Diametro alla base del dente: {gear_parameters[5]:.2f}\\n\"\n",
    "f\"Diametro alla testa del dente: {gear_parameters[9]:.2f}\\n\"\n",
    "f\"Diametro di radice: {gear_parameters[-4]:.2f}\\n\"\n",
    "f\"Passo circolare: {gear_parameters[-3]:.2f}\\n\"\n",
    "f\"Profondità lavorata: {gear_parameters[4]:.2f}\\n\\n\"\n",
    "f\"Parametri dell'ingranaggio 2: \\n\"\n",
    "f\"Numero di denti: {gear_parameters[-2]}\\n\"\n",
    "f\"Diametro primitivo: {gear_parameters[1]:.2f}\\n\"\n",
    "f\"Diametro alla base del dente: {gear_parameters[6]:.2f}\\n\"\n",
    "f\"Diametro alla testa del dente: {gear_parameters[10]:.2f}\\n\"\n",
    "f\"Diametro di radice: {gear_parameters[-3]:.2f}\\n\"\n",
    "f\"Passo circolare: {gear_parameters[-2]:.2f}\\n\"\n",
    "f\"Profondità lavorata: {gear_parameters[4]:.2f}\\n\\n\"\n",
    "f\"Rapporto di trasmissione: {gear_parameters[-5]:.2f}\\n\"\n",
    "f\"Angolo di pressione: {gear_parameters[-4]:.0f}°{gear_parameters[-3]:.0f}'{gear_parameters[-2]:.2f}\" \\n\"\n",
    "f\"Lunghezza dei centri: {gear_parameters[-1]:.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "'(' was never closed (2823076461.py, line 58)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[21], line 58\u001b[1;36m\u001b[0m\n\u001b[1;33m    gear_parameters = calculate_gear_parameters(center_gear_parameters(center_distance, d1, d2, h1, h2, z1, z2, m)\u001b[0m\n\u001b[1;37m                                               ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m '(' was never closed\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def calculate_gear_parameters(center_distance, d1, d2, h1=None, h2=None, z1=None, z2=None, m=1):\n",
    "    if z1 is None:\n",
    "        z1 = int(round((d1 * math.pi) / m))\n",
    "    if z2 is None:\n",
    "        z2 = int(round((d2 * math.pi) / m))\n",
    "\n",
    "    pd1 = m * z1\n",
    "    pd2 = m * z2\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter1 = pd1 - 2 * dedendum\n",
    "    base_diameter2 = pd2 - 2 * dedendum\n",
    "    pitch_diameter1 = pd1\n",
    "    pitch_diameter2 = pd2\n",
    "    outside_diameter1 = d1 + 2 * (addendum + (h1 or 0))\n",
    "    outside_diameter2 = d2 + 2 * (addendum + (h2 or 0))\n",
    "    root_diameter1 = pd1 - 2 * dedendum\n",
    "    root_diameter2 = pd2 - 2 * dedendum\n",
    "    circular_pitch1 = math.pi * pd1 / z1\n",
    "    circular_pitch2 = math.pi * pd2 / z2\n",
    "    rotation_ratio = d1 / d2\n",
    "    angle = math.degrees(math.atan2((d2-d1)/2, center_distance))\n",
    "\n",
    "    length = center_distance + (d1 + d2) / 2 * (math.pi / 180) * angle\n",
    "\n",
    "    angle_degrees = math.floor(angle)\n",
    "    angle_minutes = math.floor((angle - angle_degrees) * 60)\n",
    "    angle_seconds = (angle - angle_degrees - angle_minutes / 60) * 3600\n",
    "\n",
    "    return pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length, z1, z2\n",
    "\n",
    "center_distance = float(input(\"Inserisci la distanza tra i centri delle due ruote dentate: \"))\n",
    "d1 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 1: \"))\n",
    "d2 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 2: \"))\n",
    "h1 = input(\"Inserisci l'altezza del dente dell'ingranaggio 1 (opzionale): \")\n",
    "h2 = input(\"Inserisci l'altezza del dentedell'ingranaggio 2 (opzionale): \")\n",
    "z1 = input(\"Inserisci il numero di denti dell'ingranaggio 1 (opzionale): \")\n",
    "z2 = input(\"Inserisci il numero di denti dell'ingranaggio 2 (opzionale): \")\n",
    "m = float(input(\"Inserisci il modulo: \"))\n",
    "\n",
    "# check if optional values are None or empty strings\n",
    "if not h1:\n",
    "    h1 = None\n",
    "if not h2:\n",
    "    h2 = None\n",
    "if not z1:\n",
    "    z1 = None\n",
    "else:\n",
    "    z1 = int(z1)\n",
    "if not z2:\n",
    "    z2 = None\n",
    "else:\n",
    "    z2 = int(z2)\n",
    "\n",
    "gear_parameters = calculate_gear_parameters(center_gear_parameters(center_distance, d1, d2, h1, h2, z1, z2, m)\n",
    "if not h1:\n",
    "    h1 = None\n",
    "if not h2:\n",
    "    h2 = None\n",
    "if not z1:\n",
    "    z1 = None\n",
    "else:\n",
    "    z1 = int(z1)\n",
    "if not z2:\n",
    "    z2 = None\n",
    "else:\n",
    "    z2 = int(z2)\n",
    "\n",
    "gear_parameters = calculate_gear_parameters(center_distance, d1, d2, h1, h2, z1, z2, m)\n",
    "print(f\"Parametri dell'ingranaggio 1: \\n\"\n",
    "      f\"Numero di denti: {gear_parameters[-11]}\\n\"\n",
    "      f\"Diametro primitivo: {gear_parameters[0]:.2f}\\n\"\n",
    "      f\"Diametro alla base del dente: {gear_parameters[5]:.2f}\\n\"\n",
    "      f\"Diametro alla testa del dente: {gear_parameters[9]:.2f}\\n\"\n",
    "      f\"Diametro di radice: {gear_parameters[-6]:.2f}\\n\"\n",
    "      f\"Passo circolare: {gear_parameters[-5]:.2f}\\n\"\n",
    "      f\"Profondità lavorata: {gear_parameters[4]:.2f}\\n\\n\"\n",
    "      f\"Parametri dell'ingranaggio 2: \\n\"\n",
    "      f\"Numero di denti: {gear_parameters[-10]}\\n\"\n",
    "      f\"Diametro primitivo: {gear_parameters[1]:.2f}\\n\"\n",
    "      f\"Diametro alla base del dente: {gear_parameters[6]:.2f}\\n\"\n",
    "      f\"Diametro alla testa del dente: {gear_parameters[10]:.2f}\\n\"\n",
    "      f\"Diametro di radice: {gear_parameters[-5]:.2f}\\n\"\n",
    "      f\"Passo circolare: {gear_parameters[-4]:.2f}\\n\"\n",
    "      f\"Profondità lavorata: {gear_parameters[4]:.2f}\\n\\n\"\n",
    "      f\"Rapporto di trasmissione: {gear_parameters[-3]:.2f}\\n\"\n",
    "      f\"Angolo di pressione: {gear_parameters[-2]:.0f}°{gear_parameters[-1]:.0f}'{gear_parameters[-4]:.2f}\\\"\\n\"\n",
    "      f\"Lunghezza dei centri: {gear_parameters[-7]:.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3565127235.py, line 60)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[10], line 60\u001b[1;36m\u001b[0m\n\u001b[1;33m    stampa i parametri dei pignoni\u001b[0m\n\u001b[1;37m           ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def calculate_gear_parameters(center_distance, d1, d2, h1=None, h2=None, z1=None, z2=None, m=1):\n",
    "    if z1 is None:\n",
    "        z1 = int(round((d1 * math.pi) / m))\n",
    "    if z2 is None:\n",
    "        z2 = int(round((d2 * math.pi) / m))\n",
    "\n",
    "    pd1 = m * z1\n",
    "    pd2 = m * z2\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter1 = pd1 - 2 * dedendum\n",
    "    base_diameter2 = pd2 - 2 * dedendum\n",
    "    pitch_diameter1 = pd1\n",
    "    pitch_diameter2 = pd2\n",
    "    outside_diameter1 = d1 + 2 * (addendum + (h1 or 0))\n",
    "    outside_diameter2 = d2 + 2 * (addendum + (h2 or 0))\n",
    "    root_diameter1 = pd1 - 2 * dedendum\n",
    "    root_diameter2 = pd2 - 2 * dedendum\n",
    "    circular_pitch1 = math.pi * pd1 / z1\n",
    "    circular_pitch2 = math.pi * pd2 / z2\n",
    "    rotation_ratio = d1 / d2\n",
    "    angle = math.degrees(math.atan2((d2-d1)/2, center_distance))\n",
    "\n",
    "    length = center_distance + (d1 + d2) / 2 * (math.pi / 180) * angle\n",
    "\n",
    "    angle_degrees = math.floor(angle)\n",
    "    angle_minutes = math.floor((angle - angle_degrees) * 60)\n",
    "    angle_seconds = (angle - angle_degrees - angle_minutes / 60) * 3600\n",
    "\n",
    "    return pd1, pd2, addendum, dedendum, working_depth, base_diameter1, base_diameter2, pitch_diameter1, pitch_diameter2, outside_diameter1, outside_diameter2, root_diameter1, root_diameter2, circular_pitch1, circular_pitch2, rotation_ratio, angle_degrees, angle_minutes, angle_seconds, length, z1, z2\n",
    "\n",
    "center_distance = float(input(\"Inserisci la distanza tra i centri delle due ruote dentate: \"))\n",
    "d1 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 1: \"))\n",
    "d2 = float(input(\"Inserisci il diametro esterno dell'ingranaggio 2: \"))\n",
    "h1 = input(\"Inserisci l'altezza del dente dell'ingranaggio 1 (opzionale): \")\n",
    "h2 = input(\"Inserisci l'altezza del dentedell'ingranaggio 2 (opzionale): \")\n",
    "z1 = input(\"Inserisci il numero di denti dell'ingranaggio 1 (opzionale): \")\n",
    "z2 = input(\"Inserisci il numero di denti dell'ingranaggio 2 (opzionale): \")\n",
    "m = float(input(\"Inserisci il modulo: \"))\n",
    "\n",
    "# controlla se i valori opzionali sono None o stringhe vuote\n",
    "if not h1:\n",
    "    h1 = None\n",
    "if not h2:\n",
    "    h2 = None\n",
    "if not z1:\n",
    "    z1 = None\n",
    "else:\n",
    "    z1 = int(z1)\n",
    "if not z2:\n",
    "    z2 = None\n",
    "else:\n",
    "    z2 = int(z2)\n",
    "\n",
    "gear_parameters = calculate_gear_parameters(center_distance, module, pressure_angle, helix_angle, h1, h2, z1, z2)\n",
    "\n",
    "stampa i parametri dei pignoni\n",
    "print(\"Parametri dei pignoni:\\n\")\n",
    "print(f\" - Diametro primitivo: {gear_parameters['diametro_primitivo']} mm\")\n",
    "print(f\" - Diametro di fondo: {gear_parameters['diametro_fondo']} mm\")\n",
    "print(f\" - Diametro esterno: {gear_parameters['diametro_esterno']} mm\")\n",
    "print(f\" - Diametro di testa: {gear_parameters['diametro_testa']} mm\")\n",
    "print(f\" - Modulo: {gear_parameters['modulo']}\")\n",
    "print(f\" - Angolo di pressione: {gear_parameters['angolo_pressione']}°\")\n",
    "print(f\" - Angolo di elica: {gear_parameters['angolo_elica']}°\")\n",
    "print(f\" - Numero di denti: {gear_parameters['numero_denti']}\")\n",
    "\n",
    "calcola e stampa il rapporto di trasmissione\n",
    "if z1 and z2:\n",
    "rapporto_trasmissione = z2 / z1\n",
    "print(f\"\\nIl rapporto di trasmissione è: {rapporto_trasmissione}\")\n",
    "else:\n",
    "print(\"\\nImpossibile calcolare il rapporto di trasmissione perché mancano uno o entrambi i valori di z1 e z2.\")\n",
    "\n",
    "calcola e stampa la velocità di rotazione del pignone 2\n",
    "if rpm and z1 and z2:\n",
    "vel_rot_pignone2 = (rpm * z1) / z2\n",
    "print(f\"\\nLa velocità di rotazione del pignone 2 è: {vel_rot_pignone2} giri/min\")\n",
    "else:\n",
    "print(\"\\nImpossibile calcolare la velocità di rotazione del pignone 2 perché mancano uno o più valori tra rpm, z1 e z2.\")\n",
    "\n",
    "calcola e stampa il carico tangenziale sulla dentatura\n",
    "if torque and gear_parameters['larghezza_denti'] and gear_parameters['diametro_primitivo']:\n",
    "carico_tangenziale = (2 * torque * 1000) / (gear_parameters['larghezza_denti'] * gear_parameters['diametro_primitivo'])\n",
    "print(f\"\\nIl carico tangenziale sulla dentatura è: {carico_tangenziale} N/mm\")\n",
    "else:\n",
    "print(\"\\nImpossibile calcolare il carico tangenziale sulla dentatura perché mancano uno o più valori tra coppia, larghezza dei denti e diametro primitivo.\")\n",
    "# calcola il diametro di base del pignone\n",
    "dp = (z1 + 2) * module\n",
    "\n",
    "# calcola il diametro di testa del pignone\n",
    "da = dp + 2 * module\n",
    "\n",
    "# calcola il diametro di testa della corona\n",
    "db = module * z2\n",
    "\n",
    "# calcola il diametro di fondo della corona\n",
    "df = db - 2.5 * module\n",
    "\n",
    "# calcola l'altezza del dente\n",
    "h = 2 * module\n",
    "\n",
    "# calcola l'altezza della testa del dente\n",
    "ha = 1.25 * module\n",
    "\n",
    "# calcola l'altezza del piede del dente\n",
    "hf = 0.75 * module\n",
    "\n",
    "# calcola l'altezza del dente della corona\n",
    "hc = h\n",
    "\n",
    "# calcola l'altezza della testa del dente della corona\n",
    "hca = ha\n",
    "\n",
    "# calcola l'altezza del piede del dente della corona\n",
    "hcf = hf\n",
    "\n",
    "# crea un dizionario con i parametri dell'ingranaggio\n",
    "gear_parameters = {\n",
    "    'module': module,\n",
    "    'z1': z1,\n",
    "    'z2': z2,\n",
    "    'h1': h1,\n",
    "    'h2': h2,\n",
    "    'dp': dp,\n",
    "    'da': da,\n",
    "    'db': db,\n",
    "    'df': df,\n",
    "    'h': h,\n",
    "    'ha': ha,\n",
    "    'hf': hf,\n",
    "    'hc': hc,\n",
    "    'hca': hca,\n",
    "    'hcf': hcf\n",
    "}\n",
    "\n",
    "# stampa i parametri dell'ingranaggio\n",
    "print('Parametri dell\\'ingranaggio:')\n",
    "for key, value in gear_parameters.items():\n",
    "    if value is not None:\n",
    "        print(f'{key}: {value}')\n",
    "    else:\n",
    "        print(f'{key}: Non definito')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 59) (1510687310.py, line 59)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[12], line 59\u001b[1;36m\u001b[0m\n\u001b[1;33m    d1 = float(input(\"gear_parameters = calculate_gear_parameters(center_distance, d1, d2, h1, h2, z1, z2, m)\u001b[0m\n\u001b[1;37m                     ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 59)\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def calculate_gear_parameters(center_distance, d1, d2, h1=None, h2=None, z1=None, z2=None, m=1):\n",
    "    if z1 is None:\n",
    "        z1 = int(round((d1 * math.pi) / m))\n",
    "    if z2 is None:\n",
    "        z2 = int(round((d2 * math.pi) / m))\n",
    "\n",
    "    pd1 = m * z1\n",
    "    pd2 = m * z2\n",
    "    addendum = m\n",
    "    dedendum = 1.25 * m\n",
    "    working_depth = 2.25 * m\n",
    "    base_diameter1 = pd1 - 2 * dedendum\n",
    "    base_diameter2 = pd2 - 2 * dedendum\n",
    "    pitch_diameter1 = pd1\n",
    "    pitch_diameter2 = pd2\n",
    "    outside_diameter1 = d1 + 2 * (addendum + (h1 or 0))\n",
    "    outside_diameter2 = d2 + 2 * (addendum + (h2 or 0))\n",
    "    root_diameter1 = pd1 - 2 * dedendum\n",
    "    root_diameter2 = pd2 - 2 * dedendum\n",
    "    circular_pitch1 = math.pi * pd1 / z1\n",
    "    circular_pitch2 = math.pi * pd2 / z2\n",
    "    rotation_ratio = d1 / d2\n",
    "    angle = math.degrees(math.atan2((d2-d1)/2, center_distance))\n",
    "\n",
    "    length = center_distance + (d1 + d2) / 2 * (math.pi / 180) * angle\n",
    "\n",
    "    angle_degrees = math.floor(angle)\n",
    "    angle_minutes = math.floor((angle - angle_degrees) * 60)\n",
    "    angle_seconds = (angle - angle_degrees - angle_minutes / 60) * 3600\n",
    "\n",
    "    return {\n",
    "        'diametro_primitivo_1': pd1,\n",
    "        'diametro_primitivo_2': pd2,\n",
    "        'addendum': addendum,\n",
    "        'dedendum': dedendum,\n",
    "        'profondita_lavorazione': working_depth,\n",
    "        'diametro_base_1': base_diameter1,\n",
    "        'diametro_base_2': base_diameter2,\n",
    "        'diametro_testa_1': outside_diameter1,\n",
    "        'diametro_testa_2': outside_diameter2,\n",
    "        'diametro_fondo_1': root_diameter1,\n",
    "        'diametro_fondo_2': root_diameter2,\n",
    "        'modulo_1': m,\n",
    "        'modulo_2': m,\n",
    "        'angolo_pressione': 20,  # assume a standard pressure angle of 20 degrees\n",
    "        'angolo_elica': 0,  # assume a straight-toothed gear\n",
    "        'numero_denti_1': z1,\n",
    "        'numero_denti_2': z2,\n",
    "        'passo_circolare_1': circular_pitch1,\n",
    "        'passo_circolare_2': circular_pitch2,\n",
    "        'rapporto_trasmissione': z2 / z1 if z1 and z2 else None,\n",
    "        'velocita_rotazione_2': (rpm * z1) / z2 if rpm and z1 and z2 else None,\n",
    "        'lunghezza_arco': length,\n",
    "    }\n",
    "\n",
    "center_distance = float(input(\"Inserisci la distanza tra i centri delle due ruote dentate: \"))\n",
    "d1 = float(input(\"gear_parameters = calculate_gear_parameters(center_distance, d1, d2, h1, h2, z1, z2, m)\n",
    "\n",
    "stampa i parametri dei pignoni\n",
    "print(\"Parametri dei pignoni:\\n\")\n",
    "print(f\" - Diametro primitivo: {gear_parameters[0]:.2f} mm\")\n",
    "print(f\" - Diametro di fondo: {gear_parameters[11]:.2f} mm\")\n",
    "print(f\" - Diametro esterno: {gear_parameters[9]:.2f} mm\")\n",
    "print(f\" - Modulo: {m:.2f}\")\n",
    "print(f\" - Angolo di pressione: 20°\")\n",
    "print(f\" - Angolo di elica: 0°\")\n",
    "print(f\" - Numero di denti: {z1}, {z2}\")\n",
    "\n",
    "calcola e stampa il rapporto di trasmissione\n",
    "if z1 and z2:\n",
    "rapporto_trasmissione = z2 / z1\n",
    "print(f\"\\nIl rapporto di trasmissione è: {rapporto_trasmissione:.2f}\")\n",
    "else:\n",
    "print(\"\\nImpossibile calcolare il rapporto di trasmissione perché mancano uno o entrambi i valori di z1 e z2.\")\n",
    "\n",
    "calcola e stampa la velocità di rotazione del pignone 2\n",
    "if rpm and z1 and z2:\n",
    "vel_rot_pignone2 = (rpm * z1) / z2\n",
    "print(f\"\\nLa velocità di rotazione del pignone 2 è: {vel_rot_pignone2:.2f} giri/min\")\n",
    "else:\n",
    "print(\"\\nImpossibile calcolare la velocità di rotazione del pignone 2 perché mancano uno o più valori tra rpm, z1 e z2.\")\n",
    "\n",
    "calcola e stampa il carico tangenziale sulla dentatura\n",
    "if F and b and z2 and m:\n",
    "Wt = F * b / (m * z2)\n",
    "print(f\"\\nIl carico tangenziale sulla dentatura del pignone 2 è: {Wt:.2f} N\")\n",
    "else:\n",
    "print(\"\\nImpossibile calcolare il carico tangenziale sulla dentatura perché mancano uno o più valori tra F, b, z2 e m.\")\n",
    "\n",
    "calcola e stampa la potenza trasmessa\n",
    "if rpm and z1 and z2:\n",
    "P = 2 * math.pi / 60 * rpm * F * vel_rot_pignone2\n",
    "print(f\"\\nLa potenza trasmessa è: {P:.2f} W\")\n",
    "else:\n",
    "print(\"\\nImpossibile calcolare la potenza trasmessa perché mancano uno o più valori tra rpm, z1 e z2.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
